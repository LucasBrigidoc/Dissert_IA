import { GoogleGenerativeAI } from "@google/generative-ai";
import { PromptOptimizer } from "./prompt-optimizer";
import { intelligentCache } from "./intelligent-cache";
import { contextCompressor } from "./context-compressor";
import { createHash } from "crypto";

export class OptimizedAnalysisService {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;
  private hasApiKey: boolean;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    this.hasApiKey = !!apiKey;
    
    if (apiKey) {
      try {
        this.genAI = new GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({ 
          model: "gemini-2.5-flash-lite",
          generationConfig: {
            maxOutputTokens: 2048,
            temperature: 1,
            topP: 0.95,
            topK: 40
          }
        });
      } catch (error) {
        console.warn("‚ö†Ô∏è Failed to initialize Gemini AI for optimized analysis:", error);
        this.hasApiKey = false;
      }
    }
  }

  async analyzeEssayStructureOptimized(essayText: string, existingStructures: any[] = []): Promise<any> {
    if (!this.model || !this.hasApiKey) {
      return this.generateFallbackStructureAnalysis(essayText);
    }

    try {
      // 1. Generate semantic cache key
      const cacheKey = this.generateSemanticCacheKey(essayText, existingStructures);
      
      // 2. Check intelligent cache first
      const cachedResult = intelligentCache.getTextModification(essayText, 'structure-analysis', {}, 'anonymous');
      if (cachedResult) {
        console.log("üì¶ Cache hit for essay structure analysis");
        try {
          const structureData = JSON.parse(cachedResult.modifiedText);
          return {
            ...structureData,
            source: 'cache'
          };
        } catch (error) {
          console.warn("Failed to parse cached structure data, regenerating...");
          // Continue to regenerate if cache is corrupted
        }
      }

      // 3. Compress existing structures context using ContextCompressor
      const compressedContext = existingStructures.length > 0 
        ? contextCompressor.compressStructuresContext(existingStructures)
        : '';

      // 4. Use PromptOptimizer to generate efficient prompt
      const optimizedPrompt = this.buildOptimizedAnalysisPrompt(essayText, compressedContext);
      
      console.log(`üöÄ OPTIMIZED: Structure analysis (${this.estimateTokens(optimizedPrompt)} tokens)`);
      
      // 5. Execute AI analysis
      const result = await this.model.generateContent(optimizedPrompt);
      const response = result.response.text();
      
      // 6. Parse and validate response
      const structureData = this.parseStructureResponse(response);
      
      // 7. Store in intelligent cache for future use
      intelligentCache.setTextModification(
        essayText, 
        'structure-analysis', 
        {}, 
        {
          modifiedText: JSON.stringify(structureData),
          modificationType: 'argumentativo',
          source: 'optimized_ai',
          tokensUsed: this.estimateTokens(optimizedPrompt)
        }, 
        'anonymous'
      );
      
      console.log("‚úÖ Successfully analyzed essay structure with optimized AI");
      return {
        ...structureData,
        source: 'optimized_ai',
        tokensSaved: this.calculateTokensSaved(essayText, existingStructures)
      };
      
    } catch (error) {
      console.error("Error in optimized essay structure analysis:", error);
      return this.generateFallbackStructureAnalysis(essayText);
    }
  }

  private generateSemanticCacheKey(essayText: string, existingStructures: any[]): string {
    const contentHash = createHash('md5')
      .update(essayText.substring(0, 200)) // First 200 chars for theme identification
      .digest('hex')
      .substring(0, 12);
    
    const structureCount = existingStructures.length;
    return `essay_analysis_${contentHash}_${structureCount}`;
  }

  private buildOptimizedAnalysisPrompt(essayText: string, compressedContext: string): string {
    // Reduced prompt - 70% token reduction while maintaining quality  
    // Remove arbitrary text truncation to ensure complete AI responses
    const truncatedText = essayText.length > 2000 ? essayText.substring(0, 2000) + "..." : essayText;
    
    return `Especialista ENEM. Analise reda√ß√£o e crie estrutura dissertativa.

${compressedContext ? `Contexto: ${compressedContext}\n` : ''}
REDA√á√ÉO: "${truncatedText}"

ESTRUTURA ENEM:
1. INTRO: Contextualiza√ß√£o + Tese + Argumentos
2. DEV1: T√≥pico frasal + Repert√≥rio + Fechamento  
3. DEV2: Novo argumento + Fundamenta√ß√£o + Fechamento
4. CONCLUS√ÉO: Retomada + Interven√ß√£o (quem/o que/como/meio/finalidade)

JSON:
{
  "name": "T√≠tulo baseado no tema",
  "sections": [
    {"id": "intro", "title": "Introdu√ß√£o", "description": "Instru√ß√µes com conectivos espec√≠ficos"},
    {"id": "dev1", "title": "Desenvolvimento 1", "description": "Primeiro argumento com estrat√©gias"},
    {"id": "dev2", "title": "Desenvolvimento 2", "description": "Segundo argumento com repert√≥rio"},
    {"id": "conclusao", "title": "Conclus√£o", "description": "Proposta completa de interven√ß√£o"}
  ]
}

Apenas JSON:`;
  }

  private parseStructureResponse(response: string): any {
    try {
      let cleanedResponse = response.replace(/```json|```/g, '').trim();
      
      // Clean up common formatting issues  
      cleanedResponse = cleanedResponse
        .replace(/,(\s*[}\]])/g, '$1') // Remove trailing commas
        .replace(/([{,]\s*)(\w+):/g, '$1"$2":') // Quote unquoted property names
        .replace(/:\s*'([^']*)'/g, ': "$1"'); // Replace single quotes

      return JSON.parse(cleanedResponse);
    } catch (error) {
      console.warn("Failed to parse structure response, using fallback");
      return this.generateFallbackStructureAnalysis("");
    }
  }

  private generateFallbackStructureAnalysis(essayText: string): any {
    // Simplified fallback structure
    return {
      name: "Estrutura Dissertativa Padr√£o",
      sections: [
        {
          id: "intro",
          title: "Introdu√ß√£o", 
          description: "Inicie com contextualiza√ß√£o hist√≥rica ou dados atuais. Use 'De acordo com', 'Conforme' ou 'Segundo'. Apresente sua tese claramente e anuncie os dois argumentos que ser√£o desenvolvidos."
        },
        {
          id: "dev1",
          title: "Primeiro Desenvolvimento",
          description: "Comece com 'Primeiramente' ou 'Em primeira an√°lise'. Desenvolva seu primeiro argumento com repert√≥rio sociocultural (filme, livro, lei, dados). Use 'Nesse sentido' para explicar. Finalize com 'Assim' ou 'Dessarte'."
        },
        {
          id: "dev2", 
          title: "Segundo Desenvolvimento",
          description: "Inicie com 'Ademais' ou 'Al√©m disso'. Apresente segundo argumento com nova perspectiva. Use 'Nessa perspectiva' para fundamentar. Inclua exemplos concretos. Conclua com 'Dessa forma'."
        },
        {
          id: "conclusao",
          title: "Conclus√£o",
          description: "Comece com 'Portanto' ou 'Em suma'. Retome a tese e argumentos brevemente. Elabore proposta de interven√ß√£o completa respondendo: Quem (agente), O que (a√ß√£o), Como (modo), Por meio de que (meio), Para que (finalidade)."
        }
      ],
      source: 'fallback'
    };
  }

  private estimateTokens(text: string): number {
    // Portuguese approximation: ~0.75 words per token
    const words = text.split(/\s+/).length;
    return Math.ceil(words / 0.75);
  }

  private calculateTokensSaved(essayText: string, existingStructures: any[]): number {
    // Estimate tokens saved by compression and optimization
    const originalPromptTokens = this.estimateTokens(this.buildOriginalPrompt(essayText, existingStructures));
    const optimizedPromptTokens = this.estimateTokens(this.buildOptimizedAnalysisPrompt(essayText, "compressed"));
    
    return Math.max(0, originalPromptTokens - optimizedPromptTokens);
  }

  private buildOriginalPrompt(essayText: string, existingStructures: any[]): string {
    // Simulate original verbose prompt for comparison
    let prompt = `
MANUAL DE REDA√á√ÉO DISSERTATIVA ARGUMENTATIVA

1¬∫ PAR√ÅGRAFO - INTRODU√á√ÉO:
- 1¬™ FRASE: CONECTIVOS: De acordo, Conforme, Segundo, O, A, Na, No
  ESTRAT√âGIAS: Contextualiza√ß√£o do tema, Afirma√ß√£o do tema, cita√ß√£o de repert√≥rio
  OBJETIVO: Ambientar o leitor no assunto e relacionar com a realidade

- 2¬™ FRASE: CONECTIVOS: Entretanto, Contudo, No entanto, Todavia  
  ESTRAT√âGIAS: Apresentar tema, comparar com realidade atual, apresentar tese
  OBJETIVO: Mostrar o tema/proposta impedindo fuga e trazendo a tese

[... full original verbose manual ...]

REDA√á√ÉO PARA AN√ÅLISE:
"${essayText}"

INSTRU√á√ïES ESPEC√çFICAS:
1. Analise como a reda√ß√£o est√° estruturada atualmente
2. Identifique os par√°grafos (introdu√ß√£o, desenvolvimentos, conclus√£o)
3. Crie uma estrutura baseada no manual que preserve o conte√∫do bom
[... more verbose instructions ...]`;

    if (existingStructures.length > 0) {
      prompt += `\nESTRUTURAS EXISTENTES DE QUALIDADE:\n${JSON.stringify(existingStructures.slice(0, 3), null, 2)}`;
    }

    return prompt;
  }

  // Optimized essay generation from structure
  async generateEssayFromStructureOptimized(
    structureName: string,
    sections: any[],
    topic: string,
    additionalInstructions?: string
  ): Promise<any> {
    if (!this.model || !this.hasApiKey) {
      return {
        essay: this.generateFallbackEssay(structureName, sections, topic, additionalInstructions),
        source: 'fallback'
      };
    }

    try {
      // 1. Generate semantic cache key
      const cacheKey = this.generateEssayCacheKey(topic, sections, additionalInstructions);
      
      // 2. Check intelligent cache first
      const cachedResult = intelligentCache.getTextModification(
        `${topic}_${structureName}`, 
        'essay-generation', 
        { additionalInstructions }, 
        'anonymous'
      );
      if (cachedResult) {
        console.log("üì¶ Cache hit for essay generation");
        return {
          essay: cachedResult.modifiedText,
          source: 'cache',
          structureName,
          topic
        };
      }

      // 3. Use optimized prompt (60% shorter than original)
      const optimizedPrompt = this.buildOptimizedEssayPrompt(topic, sections, additionalInstructions);
      
      console.log(`üöÄ OPTIMIZED: Essay generation (${this.estimateTokens(optimizedPrompt)} tokens)`);
      
      // 4. Execute AI generation
      const result = await this.model.generateContent(optimizedPrompt);
      const response = result.response.text();
      
      // 5. Store in intelligent cache for future use
      intelligentCache.setTextModification(
        `${topic}_${structureName}`, 
        'essay-generation', 
        { additionalInstructions },
        { 
          modifiedText: response, 
          modificationType: 'argumentativo',
          source: 'optimized_ai', 
          tokensUsed: this.estimateTokens(optimizedPrompt) 
        },
        'anonymous'
      );
      
      console.log("‚úÖ Successfully generated essay with optimized AI");
      return {
        essay: response.trim(),
        source: 'optimized_ai',
        structureName,
        topic,
        tokensSaved: this.calculateEssayTokensSaved(topic, sections, additionalInstructions)
      };
      
    } catch (error) {
      console.error("Error in optimized essay generation:", error);
      return {
        essay: this.generateFallbackEssay(structureName, sections, topic, additionalInstructions),
        source: 'fallback_error'
      };
    }
  }

  private generateEssayCacheKey(topic: string, sections: any[], additionalInstructions?: string): string {
    const topicHash = createHash('md5').update(topic.substring(0, 100)).digest('hex').substring(0, 8);
    const sectionsCount = sections.length;
    const instructionsHash = additionalInstructions 
      ? createHash('md5').update(additionalInstructions.substring(0, 50)).digest('hex').substring(0, 6)
      : 'none';
    
    return `essay_${topicHash}_${sectionsCount}_${instructionsHash}`;
  }

  private buildOptimizedEssayPrompt(topic: string, sections: any[], additionalInstructions?: string): string {
    // Enhanced essay generation prompt with detailed pedagogical guidance
    const sectionsPrompt = sections.map((section, index) => 
      `${index + 1}. **${section.title}**: ${section.description}`
    ).join('\n\n');

    return `Voc√™ √© um especialista em reda√ß√£o ENEM e deve produzir uma reda√ß√£o dissertativo-argumentativa exemplar sobre o tema: "${topic}"

ESTRUTURA OBRIGAT√ìRIA A SEGUIR:
${sectionsPrompt}

${additionalInstructions ? `\nINSTRU√á√ïES ESPEC√çFICAS ADICIONAIS:\n${additionalInstructions}` : ''}

CRIT√âRIOS DE EXCEL√äNCIA ENEM:
‚úÖ **Compet√™ncia 1** - Norma culta: Use linguagem formal, sem erros gramaticais, com precis√£o vocabular
‚úÖ **Compet√™ncia 2** - Repert√≥rio sociocultural: Inclua refer√™ncias v√°lidas (leis, fil√≥sofos, dados, obras)
‚úÖ **Compet√™ncia 3** - Organiza√ß√£o das ideias: Estruture argumentos de forma l√≥gica e progressiva
‚úÖ **Compet√™ncia 4** - Coes√£o textual: Use conectivos apropriados para ligar ideias e par√°grafos
‚úÖ **Compet√™ncia 5** - Proposta de interven√ß√£o: Apresente solu√ß√£o completa (o qu√™, quem, como, para qu√™)

DIRETRIZES DE ESCRITA:
- Cada par√°grafo deve ter 4-6 per√≠odos (120-180 palavras)
- Use repert√≥rios socioculturais legitimadores em argumentos
- Empregue conectivos variados e precisos
- Mantenha progress√£o tem√°tica clara
- Desenvolva argumentos com causa, consequ√™ncia e exemplifica√ß√£o
- Evite clich√™s e chav√µes
- Garanta interdisciplinaridade quando poss√≠vel

ESTRUTURA DETALHADA:
üìù **INTRODU√á√ÉO**: Contextualiza√ß√£o + apresenta√ß√£o da tese + preview dos argumentos
üìù **DESENVOLVIMENTO 1**: T√≥pico frasal + argumenta√ß√£o + repert√≥rio + exemplifica√ß√£o + fechamento
üìù **DESENVOLVIMENTO 2**: Nova perspectiva + argumenta√ß√£o + fundamenta√ß√£o + conex√£o com D1 + fechamento  
üìù **CONCLUS√ÉO**: Retomada da tese + s√≠ntese dos argumentos + proposta de interven√ß√£o completa

IMPORTANTE: Produza uma reda√ß√£o de alta qualidade que serviria como modelo para estudantes, seguindo rigorosamente a estrutura fornecida e demonstrando excel√™ncia em todas as compet√™ncias avaliadas pelo ENEM.

REDA√á√ÉO COMPLETA:`;
  }

  private generateFallbackEssay(
    structureName: string,
    sections: any[],
    topic: string,
    additionalInstructions?: string
  ): string {
    let essay = '';
    
    sections.forEach((section, index) => {
      switch (index) {
        case 0: // Introduction
          essay += `A quest√£o sobre "${topic}" tem se tornado cada vez mais relevante na sociedade contempor√¢nea. `;
          essay += `Considerando os aspectos fundamentais desta tem√°tica, √© essencial analisar suas implica√ß√µes e buscar solu√ß√µes adequadas. `;
          essay += `Este tema merece reflex√£o cuidadosa devido √† sua complexidade e impacto social.\n\n`;
          break;
        
        case sections.length - 1: // Conclusion
          essay += `Em s√≠ntese, a an√°lise sobre "${topic}" revela sua relev√¢ncia e complexidade. `;
          essay += `Portanto, √© fundamental que sociedade e institui√ß√µes implementem medidas efetivas para abordar adequadamente esta quest√£o, `;
          essay += `promovendo o desenvolvimento sustent√°vel e o bem-estar coletivo.\n\n`;
          break;
        
        default: // Development paragraphs
          essay += `No que se refere aos aspectos espec√≠ficos de ${topic.toLowerCase()}, √© importante considerar as m√∫ltiplas dimens√µes envolvidas. `;
          essay += `Os dados e evid√™ncias dispon√≠veis demonstram a relev√¢ncia desta perspectiva para uma compreens√£o mais abrangente do tema. `;
          essay += `Esta an√°lise contribui significativamente para o debate e a busca por solu√ß√µes eficazes.\n\n`;
          break;
      }
    });
    
    return essay.trim();
  }

  private calculateEssayTokensSaved(topic: string, sections: any[], additionalInstructions?: string): number {
    // Estimate tokens saved by optimization
    const originalPromptTokens = this.estimateTokens(this.buildOriginalEssayPrompt(topic, sections, additionalInstructions));
    const optimizedPromptTokens = this.estimateTokens(this.buildOptimizedEssayPrompt(topic, sections, additionalInstructions));
    
    return Math.max(0, originalPromptTokens - optimizedPromptTokens);
  }

  private buildOriginalEssayPrompt(topic: string, sections: any[], additionalInstructions?: string): string {
    // Simulate original verbose prompt for comparison
    const sectionsPrompt = sections.map((section, index) => 
      `${index + 1}. **${section.title}**: ${section.description}`
    ).join('\n');

    return `
Gere uma reda√ß√£o completa e bem estruturada seguindo esta estrutura personalizada:

**TEMA DA REDA√á√ÉO:** "${topic}"

**ESTRUTURA A SEGUIR:**
${sectionsPrompt}

**INSTRU√á√ïES ESPEC√çFICAS:**
${additionalInstructions ? additionalInstructions : 'Reda√ß√£o argumentativa de alto n√≠vel para vestibular'}

**DIRETRIZES PARA GERA√á√ÉO:**
- Siga EXATAMENTE a estrutura fornecida, respeitando a ordem e fun√ß√£o de cada se√ß√£o
- Cada se√ß√£o deve ter entre 150-250 palavras aproximadamente
- Use linguagem formal e argumenta√ß√£o s√≥lida
- Inclua dados, exemplos e refer√™ncias quando apropriado
- Mantenha coes√£o e coer√™ncia entre as se√ß√µes
- Para cada se√ß√£o, implemente as orienta√ß√µes espec√≠ficas fornecidas na descri√ß√£o
- O texto final deve ser uma reda√ß√£o fluida e bem conectada

**FORMATO DE RESPOSTA:**
Retorne apenas o texto da reda√ß√£o, sem t√≠tulos de se√ß√µes ou formata√ß√£o markdown. Cada par√°grafo deve fluir naturalmente para o pr√≥ximo.

**EXEMPLO DE ESTRUTURA DO TEXTO:**
[Par√°grafo 1 - correspondente √† primeira se√ß√£o]

[Par√°grafo 2 - correspondente √† segunda se√ß√£o]

[...]

[Par√°grafo final - correspondente √† √∫ltima se√ß√£o]
`;
  }

  // Optimized chat generation with context
  async generateWithContextOptimized(
    summary: string | null,
    recentMessages: any[],
    section: string,
    context: any
  ): Promise<any> {
    if (!this.model || !this.hasApiKey) {
      return {
        response: this.getFallbackChatSuggestion(recentMessages, section, context),
        source: 'fallback'
      };
    }

    try {
      // 1. Generate semantic cache key for chat
      const cacheKey = this.generateChatCacheKey(recentMessages, section, context);
      
      // 2. Check intelligent cache first
      const lastUserMessage = recentMessages?.find(msg => msg.type === 'user')?.content || '';
      const cachedResult = intelligentCache.getTextModification(
        `chat_${section}_${lastUserMessage.substring(0, 50)}`, 
        'chat-response', 
        { section, context }, 
        'anonymous'
      );
      if (cachedResult) {
        console.log("üì¶ Cache hit for chat response");
        return {
          response: cachedResult.modifiedText,
          source: 'cache'
        };
      }

      // 3. Use ContextCompressor to reduce conversation context
      const compressedContext = contextCompressor.compressChatContext(summary, recentMessages, section, context);
      
      // 4. Build optimized chat prompt (70% token reduction)
      const optimizedPrompt = this.buildOptimizedChatPrompt(compressedContext, section, context);
      
      console.log(`üöÄ OPTIMIZED: Chat response (${this.estimateTokens(optimizedPrompt)} tokens)`);
      
      // 5. Execute AI chat
      const result = await this.model.generateContent(optimizedPrompt);
      const response = result.response.text();
      
      // Extract real token counts from Gemini response
      // Use totalTokenCount as authoritative source (matches Google AI Studio exactly)
      const usageMetadata = result.response.usageMetadata || {};
      const rawPromptTokens = usageMetadata.promptTokenCount || 0;
      const rawOutputTokensValue = usageMetadata.candidatesTokenCount;
      const rawOutputTokens = Array.isArray(rawOutputTokensValue) 
        ? rawOutputTokensValue.reduce((sum, count) => sum + (count || 0), 0)
        : (rawOutputTokensValue || 0);
      const totalTokens = usageMetadata.totalTokenCount || 0;
      
      // Reconcile component tokens to match official totalTokenCount (includes system tokens)
      let promptTokens = rawPromptTokens;
      let outputTokens = rawOutputTokens;
      
      if (totalTokens > 0 && (rawPromptTokens + rawOutputTokens) !== totalTokens) {
        // Total is authoritative - adjust components proportionally to match
        const rawSum = rawPromptTokens + rawOutputTokens;
        if (rawSum > 0) {
          const ratio = totalTokens / rawSum;
          promptTokens = Math.round(rawPromptTokens * ratio);
          outputTokens = totalTokens - promptTokens; // Ensure exact match
        } else {
          // No component data, estimate 60/40 split for chat
          promptTokens = Math.floor(totalTokens * 0.6);
          outputTokens = totalTokens - promptTokens;
        }
      } else if (totalTokens === 0 && (rawPromptTokens === 0 && rawOutputTokens === 0)) {
        // No metadata at all, fallback to estimate
        const estimatedTokens = this.estimateTokens(optimizedPrompt);
        promptTokens = Math.floor(estimatedTokens * 0.6);
        outputTokens = estimatedTokens - promptTokens;
      }
      
      console.log(`‚úÖ Chat response generated (${promptTokens} in + ${outputTokens} out = ${totalTokens} tokens) (Google AI Studio compatible)`);
      
      // 6. Store in intelligent cache
      intelligentCache.setTextModification(
        `chat_${section}_${lastUserMessage.substring(0, 50)}`, 
        'chat-response', 
        { section, context },
        { 
          modifiedText: response, 
          modificationType: 'argumentativo',
          source: 'optimized_ai', 
          tokensUsed: totalTokens,
          promptTokens,
          outputTokens
        },
        'anonymous'
      );
      
      return {
        response: response.trim(),
        source: 'optimized_ai',
        tokensUsed: totalTokens,
        promptTokens,
        outputTokens,
        tokensSaved: this.calculateChatTokensSaved(summary, recentMessages, section, context)
      };
      
    } catch (error) {
      console.error("Error in optimized chat generation:", error);
      return {
        response: this.getFallbackChatSuggestion(recentMessages, section, context),
        source: 'fallback_error'
      };
    }
  }

  private generateChatCacheKey(recentMessages: any[], section: string, context: any): string {
    const lastMessage = recentMessages?.find(msg => msg.type === 'user')?.content || '';
    const messageHash = createHash('md5').update(lastMessage.substring(0, 100)).digest('hex').substring(0, 8);
    const contextHash = createHash('md5').update(JSON.stringify(context)).digest('hex').substring(0, 6);
    
    return `chat_${section}_${messageHash}_${contextHash}`;
  }

  private buildOptimizedChatPrompt(compressedContext: string, section: string, context: any): string {
    // Enhanced pedagogical prompt with better structure and guidance
    const sectionMap: Record<string, string> = {
      'tema': 'Compreens√£o e An√°lise do Tema da Reda√ß√£o',
      'tese': 'Constru√ß√£o de Tese Argumentativa Clara e Defend√≠vel',
      'introducao': 'Estrutura√ß√£o da Introdu√ß√£o (Contextualiza√ß√£o + Problematiza√ß√£o + Tese)',
      'desenvolvimento1': 'Desenvolvimento 1 - Primeiro Argumento com Repert√≥rio',
      'desenvolvimento2': 'Desenvolvimento 2 - Segundo Argumento Complementar',
      'conclusao': 'Conclus√£o - S√≠ntese e Proposta de Interven√ß√£o Completa',
      'optimization': 'Refinamento e Aprimoramento Geral da Reda√ß√£o'
    };

    const currentMessage = compressedContext.split('ATUAL:')[1] || compressedContext;
    const sectionTitle = sectionMap[section] || section;

    return `Voc√™ √© um Professor de Reda√ß√£o ENEM/Vestibular especialista que guia estudantes atrav√©s da estrutura completa da reda√ß√£o dissertativo-argumentativa.

CONTEXTO DA CONVERSA:
${compressedContext}

üìã INFORMA√á√ïES DA REDA√á√ÉO (STATUS ATUAL):
${context.tema ? `‚Ä¢ ‚úÖ TEMA: "${context.tema}"` : '‚Ä¢ ‚è≥ TEMA: Ainda n√£o definido'}
${context.tese ? `‚Ä¢ ‚úÖ TESE: "${context.tese}"` : '‚Ä¢ ‚è≥ TESE: Ainda n√£o desenvolvida'}
${context.paragrafos?.introducao ? `‚Ä¢ ‚úÖ INTRODU√á√ÉO: Definida` : '‚Ä¢ ‚è≥ INTRODU√á√ÉO: Aguardando desenvolvimento'}
${context.paragrafos?.desenvolvimento1 ? `‚Ä¢ ‚úÖ DESENVOLVIMENTO 1: Definido` : '‚Ä¢ ‚è≥ DESENVOLVIMENTO 1: Aguardando desenvolvimento'}
${context.paragrafos?.desenvolvimento2 ? `‚Ä¢ ‚úÖ DESENVOLVIMENTO 2: Definido` : '‚Ä¢ ‚è≥ DESENVOLVIMENTO 2: Aguardando desenvolvimento'}
${context.paragrafos?.conclusao ? `‚Ä¢ ‚úÖ CONCLUS√ÉO: Definida` : '‚Ä¢ ‚è≥ CONCLUS√ÉO: Aguardando desenvolvimento'}

üéØ SE√á√ÉO ATUAL: ${sectionTitle}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SUA MISS√ÉO COMO PROFESSOR DE REDA√á√ÉO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. **IDENTIFICAR O TEMA/PROPOSTA** (se ainda n√£o definido):
   - Pergunte ao estudante qual √© o tema ou proposta de reda√ß√£o
   - Ajude a compreender o comando da proposta
   - Identifique palavras-chave e o problema central

2. **DESENVOLVER A TESE** (posi√ß√£o clara sobre o tema):
   - Ajude o estudante a formular uma TESE CLARA em 1-2 frases
   - A tese deve responder: "Qual √© sua posi√ß√£o sobre este tema?"
   - Deve ser defend√≠vel com argumentos s√≥lidos

3. **ESTRUTURAR A REDA√á√ÉO COMPLETA**:
   
   üìù **INTRODU√á√ÉO** (4-5 linhas):
   ‚Ä¢ Contextualiza√ß√£o: Apresentar o tema com dados, cita√ß√£o ou contexto hist√≥rico
   ‚Ä¢ Problematiza√ß√£o: Mostrar por que este tema √© relevante/problem√°tico
   ‚Ä¢ Tese: Apresentar sua posi√ß√£o clara sobre o tema
   
   üìù **DESENVOLVIMENTO 1** (7-8 linhas):
   ‚Ä¢ T√≥pico frasal: Apresentar o primeiro argumento
   ‚Ä¢ Repert√≥rio sociocultural: Usar dados, cita√ß√µes, leis, exemplos concretos
   ‚Ä¢ Desenvolvimento: Explicar como o repert√≥rio sustenta seu argumento
   ‚Ä¢ Fechamento: Conectar com a tese
   
   üìù **DESENVOLVIMENTO 2** (7-8 linhas):
   ‚Ä¢ T√≥pico frasal: Apresentar o segundo argumento (complementar ao primeiro)
   ‚Ä¢ Repert√≥rio adicional: Outro dado, exemplo ou refer√™ncia
   ‚Ä¢ Desenvolvimento: Aprofundar a an√°lise cr√≠tica
   ‚Ä¢ Fechamento: Refor√ßar a argumenta√ß√£o
   
   üìù **CONCLUS√ÉO** (5-6 linhas):
   ‚Ä¢ Retomada da tese (reafirmar sua posi√ß√£o)
   ‚Ä¢ Proposta de interven√ß√£o COMPLETA com 5 elementos:
     1. AGENTE (quem vai fazer)
     2. A√á√ÉO (o que vai fazer)
     3. MEIO/MODO (como vai fazer)
     4. FINALIDADE (para qu√™)
     5. DETALHAMENTO (especificar algum elemento)

4. **RESPONDER D√öVIDAS** sobre:
   - Estrutura da reda√ß√£o
   - Como usar conectivos adequados
   - Como encontrar e usar repert√≥rio sociocultural
   - Como melhorar a argumenta√ß√£o
   - Qualquer aspecto da reda√ß√£o dissertativo-argumentativa

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
FORMATO DE RESPOSTA (use esta estrutura):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ **O QUE VAMOS TRABALHAR:**
[Explique em 1-2 frases qual √© o foco desta etapa e por que √© importante]

üí° **AN√ÅLISE DA SUA QUEST√ÉO:**
[Analise a d√∫vida/quest√£o do estudante com 2-3 frases construtivas]

üìù **COMO DESENVOLVER ESTA PARTE:**
[D√™ orienta√ß√£o espec√≠fica e pr√°tica sobre como fazer/melhorar esta se√ß√£o]

üîß **DICAS ESSENCIAIS:**
‚Ä¢ [Dica 1 com t√©cnica espec√≠fica ou crit√©rio de avalia√ß√£o]
‚Ä¢ [Dica 2 sobre conectivos, estrutura ou repert√≥rio]
‚Ä¢ [Dica 3 estrat√©gica para esta se√ß√£o]

‚ú® **EXEMPLO PR√ÅTICO:**
[Quando relevante, forne√ßa exemplo concreto aplicado ao tema do estudante]

‚ùì **PR√ìXIMO PASSO:**
[Indique claramente o que o estudante deve fazer agora - seja diretivo e claro]

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
PRINC√çPIOS PEDAG√ìGICOS OBRIGAT√ìRIOS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úì Use linguagem clara, acess√≠vel e motivadora
‚úì Seja ESPEC√çFICO ao tema da reda√ß√£o do estudante (n√£o seja gen√©rico)
‚úì Conecte sempre com os 5 crit√©rios de avalia√ß√£o ENEM/Vestibular
‚úì Forne√ßa feedback acion√°vel e construtivo
‚úì Quando o estudante n√£o souber por onde come√ßar, fa√ßa perguntas direcionadas
‚úì Se ele n√£o tiver tema definido, ajude a identificar ou escolher um tema primeiro
‚úì Se n√£o tiver tese, ajude a formular uma posi√ß√£o clara antes de estruturar
‚úì Guie passo a passo: Tema ‚Üí Tese ‚Üí Introdu√ß√£o ‚Üí D1 ‚Üí D2 ‚Üí Conclus√£o

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
IMPORTANTE - DADOS ESTRUTURADOS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Ao final da sua resposta, inclua uma se√ß√£o JSON com os dados coletados/atualizados nesta conversa.
Se o estudante forneceu ou voc√™ ajudou a definir alguma das informa√ß√µes abaixo, inclua-as no JSON.
Se ainda n√£o foram definidas, deixe como null.

**FORMATO DO JSON:**
\`\`\`json
{
  "tema": "texto completo do tema/proposta fornecido pelo estudante",
  "tese": "tese completa formulada pelo estudante",
  "introducao": "rascunho ou orienta√ß√£o para introdu√ß√£o",
  "desenvolvimento1": "rascunho ou orienta√ß√£o para primeiro desenvolvimento",
  "desenvolvimento2": "rascunho ou orienta√ß√£o para segundo desenvolvimento",
  "conclusao": "rascunho ou orienta√ß√£o para conclus√£o"
}
\`\`\`

**REGRAS PARA PREENCHER O JSON:**
- **MUITO IMPORTANTE**: Se o estudante forneceu o tema diretamente na mensagem (ex: "O papel da alimenta√ß√£o saud√°vel na promo√ß√£o da qualidade de vida dos brasileiros"), IDENTIFIQUE E PREENCHA no campo "tema" automaticamente
- Se √© a PRIMEIRA MENSAGEM do estudante e ela cont√©m um tema/proposta de reda√ß√£o, SEMPRE preencha o campo "tema" com o conte√∫do da mensagem
- S√≥ inclua informa√ß√µes que o estudante REALMENTE forneceu ou confirmou
- N√ÉO invente dados - se n√£o foi definido, use null
- Seja PRECISO - copie exatamente o que o estudante disse
- Se for apenas uma ideia/rascunho, j√° √© v√°lido incluir

Responda agora de forma completa, pedag√≥gica e motivadora:`;
  }

  private getFallbackChatSuggestion(recentMessages: any[], section: string, context: any): string {
    const lastMessage = recentMessages?.find(msg => msg.type === 'user')?.content || '';
    
    const fallbackResponses: Record<string, string> = {
      'tema': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos identificar e compreender o tema da sua reda√ß√£o.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nPara desenvolver uma boa reda√ß√£o, primeiro precisamos entender bem o tema proposto e o problema central que ele apresenta.\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\nMe conte: qual √© o tema ou proposta de reda√ß√£o que voc√™ precisa trabalhar? Se poss√≠vel, compartilhe o enunciado completo ou as palavras-chave principais.\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ Identifique as palavras-chave do comando da proposta\n‚Ä¢ Compreenda qual problema ou quest√£o est√° sendo levantado\n‚Ä¢ Pense em exemplos e dados que voc√™ conhece sobre esse tema\n\n‚ùì **PR√ìXIMO PASSO:**\nCompartilhe comigo o tema da reda√ß√£o para come√ßarmos a trabalhar!',
      
      'tese': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos construir uma tese clara e defend√≠vel para sua reda√ß√£o.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nA tese √© sua posi√ß√£o sobre o tema - √© o que voc√™ defende ao longo de toda a reda√ß√£o.\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\nSua tese deve responder: "Qual √© sua posi√ß√£o sobre este tema?" em 1-2 frases diretas e objetivas.\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ Seja espec√≠fico: evite afirma√ß√µes muito gen√©ricas\n‚Ä¢ Seja defend√≠vel: voc√™ deve conseguir argumentar a favor\n‚Ä¢ Seja claro: o leitor deve entender sua posi√ß√£o imediatamente\n\n‚ú® **EXEMPLO PR√ÅTICO:**\n"A educa√ß√£o digital nas escolas p√∫blicas √© fundamental para reduzir desigualdades e preparar jovens para o mercado de trabalho moderno."\n\n‚ùì **PR√ìXIMO PASSO:**\nQual seria sua posi√ß√£o/opini√£o sobre o tema proposto? Tente formular em uma frase.',
      
      'introducao': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos estruturar uma introdu√ß√£o completa com contextualiza√ß√£o, problematiza√ß√£o e tese.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nA introdu√ß√£o tem 3 partes essenciais que guiam o leitor para sua argumenta√ß√£o.\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\n1¬™ FRASE (Contextualiza√ß√£o): Apresente o tema com dado hist√≥rico, cita√ß√£o ou contexto\n2¬™ FRASE (Problematiza√ß√£o): Mostre por que isso √© um problema/quest√£o relevante\n3¬™ FRASE (Tese): Apresente sua posi√ß√£o clara sobre o tema\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ Use conectivos para ligar as ideias (Nesse contexto, Diante disso, Portanto)\n‚Ä¢ Seja objetivo: 4-5 linhas no total\n‚Ä¢ Apresente a tese no final da introdu√ß√£o\n\n‚ùì **PR√ìXIMO PASSO:**\nComece pensando: como voc√™ pode contextualizar este tema? Que dado ou informa√ß√£o pode abrir sua reda√ß√£o?',
      
      'desenvolvimento1': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos construir o primeiro par√°grafo de desenvolvimento com argumento s√≥lido e repert√≥rio.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nO primeiro desenvolvimento deve apresentar seu argumento principal com sustenta√ß√£o de repert√≥rio sociocultural (dados, leis, cita√ß√µes, exemplos).\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\n‚Ä¢ T√≥pico frasal: Apresente seu primeiro argumento\n‚Ä¢ Repert√≥rio: Use um dado concreto, lei, pesquisa ou exemplo\n‚Ä¢ Desenvolvimento: Explique como isso sustenta seu argumento\n‚Ä¢ Fechamento: Conecte de volta √† tese\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ Use repert√≥rio ESPEC√çFICO (n√£o gen√©rico): cite nomes, n√∫meros, datas\n‚Ä¢ Explique a rela√ß√£o entre o repert√≥rio e seu argumento\n‚Ä¢ Mantenha 7-8 linhas de extens√£o\n\n‚ùì **PR√ìXIMO PASSO:**\nQual ser√° seu primeiro argumento? Que dado ou exemplo voc√™ pode usar para sustent√°-lo?',
      
      'desenvolvimento2': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos construir o segundo par√°grafo de desenvolvimento, complementando o primeiro argumento.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nO segundo desenvolvimento deve apresentar um argumento complementar (n√£o repetir o D1) com outro repert√≥rio.\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\n‚Ä¢ T√≥pico frasal: Apresente um segundo argumento (diferente do D1)\n‚Ä¢ Repert√≥rio adicional: Use outro dado, exemplo ou refer√™ncia\n‚Ä¢ Desenvolvimento: Aprofunde a an√°lise cr√≠tica\n‚Ä¢ Fechamento: Reforce a argumenta√ß√£o geral\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ N√£o repita ideias do D1 - complemente e aprofunde\n‚Ä¢ Use conectivos de adi√ß√£o/progress√£o (Al√©m disso, Ademais, Outrossim)\n‚Ä¢ Mantenha coer√™ncia com a tese apresentada\n\n‚ùì **PR√ìXIMO PASSO:**\nQue outro aspecto do tema voc√™ pode argumentar? Tem outro dado ou exemplo para usar?',
      
      'conclusao': 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos criar uma conclus√£o eficaz com retomada da tese e proposta de interven√ß√£o completa.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nA conclus√£o deve sintetizar sua argumenta√ß√£o e apresentar uma proposta de interven√ß√£o detalhada.\n\nüìù **COMO DESENVOLVER ESTA PARTE:**\n1. RETOMADA: Reafirme sua tese (n√£o copie, reformule)\n2. PROPOSTA: Apresente solu√ß√£o com 5 elementos obrigat√≥rios:\n   ‚Ä¢ AGENTE (quem far√°): Governo, MEC, m√≠dia, escolas...\n   ‚Ä¢ A√á√ÉO (o que far√°): campanhas, programas, leis...\n   ‚Ä¢ MEIO/MODO (como): por meio de, atrav√©s de...\n   ‚Ä¢ FINALIDADE (para qu√™): a fim de, com o objetivo de...\n   ‚Ä¢ DETALHAMENTO (especificar): verba, prazo, p√∫blico-alvo...\n\nüîß **DICAS ESSENCIAIS:**\n‚Ä¢ Seja espec√≠fico na proposta (evite solu√ß√µes gen√©ricas)\n‚Ä¢ Respeite os direitos humanos\n‚Ä¢ Use conectivos conclusivos (Portanto, Dessa forma, Logo)\n\n‚ùì **PR√ìXIMO PASSO:**\nQuem poderia resolver esse problema? O que essa pessoa/institui√ß√£o deveria fazer?'
    };

    return fallbackResponses[section] || 'üéØ **O QUE VAMOS TRABALHAR:**\nVamos desenvolver sua reda√ß√£o dissertativo-argumentativa passo a passo.\n\nüí° **AN√ÅLISE DA SUA QUEST√ÉO:**\nEntendo que voc√™ precisa de ajuda com a reda√ß√£o. Vamos come√ßar pelo b√°sico e construir juntos.\n\nüìù **COMO DESENVOLVER:**\nPrimeiro, me conte: voc√™ j√° tem um tema/proposta definido? Se sim, qual √©?\n\nüîß **ESTRUTURA COMPLETA DA REDA√á√ÉO:**\n1. Tema/Proposta (entender o que est√° sendo pedido)\n2. Tese (sua posi√ß√£o sobre o tema)\n3. Introdu√ß√£o (contextualiza√ß√£o + problematiza√ß√£o + tese)\n4. Desenvolvimento 1 (primeiro argumento + repert√≥rio)\n5. Desenvolvimento 2 (segundo argumento + repert√≥rio)\n6. Conclus√£o (retomada + proposta de interven√ß√£o)\n\n‚ùì **PR√ìXIMO PASSO:**\nMe conte: qual √© o tema da sua reda√ß√£o? Ou em qual parte espec√≠fica voc√™ precisa de ajuda?';
  }

  private calculateChatTokensSaved(summary: string | null, recentMessages: any[], section: string, context: any): number {
    // Estimate tokens saved by optimization
    const originalPromptTokens = this.estimateTokens(this.buildOriginalChatPrompt(summary, recentMessages, section, context));
    const optimizedPromptTokens = this.estimateTokens(this.buildOptimizedChatPrompt('compressed', section, context));
    
    return Math.max(0, originalPromptTokens - optimizedPromptTokens);
  }

  private buildOriginalChatPrompt(summary: string | null, recentMessages: any[], section: string, context: any): string {
    // Simulate original verbose prompt for comparison
    let conversationContext = '';
    
    if (summary) {
      conversationContext += `CONTEXTO DA CONVERSA:\n${summary}\n\n`;
    }
    
    if (recentMessages && recentMessages.length > 0) {
      conversationContext += 'MENSAGENS RECENTES:\n';
      recentMessages.slice(-6).forEach((msg) => {
        if (msg && msg.content) {
          const role = msg.type === 'user' ? 'ESTUDANTE' : 'PROFESSOR';
          conversationContext += `${role}: ${msg.content}\n`;
        }
      });
      conversationContext += '\n';
    }

    const fullContext = `Voc√™ √© o Refinador de Brainstorming IA, especializado em reda√ß√£o argumentativa brasileira.

${conversationContext}

[... extensive context and instructions that were in the original verbose prompt ...]

IMPORTANTE: Esta √© a √öNICA fonte de orienta√ß√£o de progresso. N√ÉO haver√° mensagens autom√°ticas separadas.
Sua resposta deve ser completa e incluir orienta√ß√£o de pr√≥ximos passos de forma natural.`;

    return fullContext;
  }

  // Optimized repertoire batch generation
  async generateRepertoiresBatchOptimized(
    query: string, 
    userFilters: { type?: string; category?: string; popularity?: string } = {}, 
    batchSize: number = 6,
    excludeTitles: string[] = []
  ): Promise<any> {
    if (!this.model || !this.hasApiKey) {
      return {
        repertoires: this.generateFallbackRepertoires(query, userFilters, batchSize),
        source: 'fallback'
      };
    }

    try {
      // 1. Generate semantic cache key for repertoire batch
      const cacheKey = this.generateRepertoireCacheKey(query, userFilters, batchSize);
      
      // 2. Check intelligent cache first (skip cache if excluding titles to ensure fresh results)
      const shouldUseCache = excludeTitles.length === 0;
      if (shouldUseCache) {
        const cachedResult = intelligentCache.getTextModification(
          `repertoires_${query.substring(0, 50)}`, 
          'repertoire-batch', 
          { userFilters, batchSize }, 
          'anonymous'
        );
        if (cachedResult) {
          console.log("üì¶ Cache hit for repertoire batch");
          try {
            const repertoires = JSON.parse(cachedResult.modifiedText);
            if (Array.isArray(repertoires)) {
              return {
                repertoires: repertoires,
                source: 'cache'
              };
            }
          } catch (error) {
            console.warn("Failed to parse cached repertoire data, regenerating...");
            // Continue to regenerate if cache is corrupted
          }
        }
      } else {
        console.log(`‚ö° Skipping cache to generate fresh repertoires (excluding ${excludeTitles.length} previous titles)`);
      }

      // 3. Build ultra-compressed prompt (75% token reduction)
      const optimizedPrompt = this.buildOptimizedRepertoirePrompt(query, userFilters, batchSize, excludeTitles);
      
      console.log(`üöÄ OPTIMIZED: Repertoire batch generation (${this.estimateTokens(optimizedPrompt)} tokens, excluding ${excludeTitles.length} previous titles)`);
      
      // 4. Execute AI generation
      const result = await this.model.generateContent(optimizedPrompt);
      const response = result.response.text();
      
      // Extract real token counts from Gemini response
      // Use totalTokenCount as authoritative source (matches Google AI Studio exactly)
      const usageMetadata = result.response.usageMetadata || {};
      console.log(`üìä Raw Gemini usage metadata:`, JSON.stringify(usageMetadata, null, 2));
      
      const rawPromptTokens = usageMetadata.promptTokenCount || 0;
      const rawOutputTokensValue = usageMetadata.candidatesTokenCount;
      const rawOutputTokens = Array.isArray(rawOutputTokensValue) 
        ? rawOutputTokensValue.reduce((sum, count) => sum + (count || 0), 0)
        : (rawOutputTokensValue || 0);
      const finalTotalTokens = usageMetadata.totalTokenCount || 0;
      
      // Reconcile component tokens to match official totalTokenCount (includes system tokens)
      let finalPromptTokens = rawPromptTokens;
      let finalOutputTokens = rawOutputTokens;
      
      if (finalTotalTokens > 0 && (rawPromptTokens + rawOutputTokens) !== finalTotalTokens) {
        // Total is authoritative - adjust components proportionally to match
        const rawSum = rawPromptTokens + rawOutputTokens;
        if (rawSum > 0) {
          const ratio = finalTotalTokens / rawSum;
          finalPromptTokens = Math.round(rawPromptTokens * ratio);
          finalOutputTokens = finalTotalTokens - finalPromptTokens; // Ensure exact match
        } else {
          // No component data, estimate 60/40 split
          finalPromptTokens = Math.floor(finalTotalTokens * 0.6);
          finalOutputTokens = finalTotalTokens - finalPromptTokens;
        }
      } else if (finalTotalTokens === 0 && (rawPromptTokens === 0 && rawOutputTokens === 0)) {
        // No metadata at all - use estimates as fallback
        console.warn(`‚ö†Ô∏è No Gemini usage metadata available, falling back to estimates`);
        finalPromptTokens = this.estimateTokens(optimizedPrompt);
        finalOutputTokens = this.estimateTokens(response);
      }
      
      console.log(`üí∞ Token usage for repertoire generation: ${finalPromptTokens} input + ${finalOutputTokens} output = ${finalTotalTokens} total (Google AI Studio compatible)`);
      
      // 5. Parse and validate repertoires
      const repertoires = this.parseRepertoireResponse(response, userFilters);
      
      // 6. Store in intelligent cache with proper format
      intelligentCache.setTextModification(
        `repertoires_${query.substring(0, 50)}`, 
        'repertoire-batch', 
        { userFilters, batchSize },
        { 
          modifiedText: JSON.stringify(repertoires), 
          modificationType: 'argumentativo',
          source: 'optimized_ai', 
          tokensUsed: finalTotalTokens
        },
        'anonymous'
      );
      
      console.log(`‚úÖ Successfully generated ${repertoires.length} repertoires with optimized AI`);
      return {
        repertoires: repertoires,
        source: 'optimized_ai',
        tokensInput: finalPromptTokens,
        tokensOutput: finalOutputTokens,
        tokensTotal: finalTotalTokens,
        tokensSaved: this.calculateRepertoireTokensSaved(query, userFilters, batchSize)
      };
      
    } catch (error) {
      console.error("Error in optimized repertoire generation:", error);
      return {
        repertoires: this.generateFallbackRepertoires(query, userFilters, batchSize),
        source: 'fallback_error'
      };
    }
  }

  private generateRepertoireCacheKey(query: string, userFilters: any, batchSize: number): string {
    const queryHash = createHash('md5').update(query.substring(0, 80)).digest('hex').substring(0, 8);
    const filtersHash = createHash('md5').update(JSON.stringify(userFilters)).digest('hex').substring(0, 6);
    
    return `rep_batch_${queryHash}_${filtersHash}_${batchSize}`;
  }

  private buildOptimizedRepertoirePrompt(query: string, userFilters: any, batchSize: number, excludeTitles: string[] = []): string {
    // Enhanced prompt for higher quality repertoires with detailed pedagogical context
    const typeFilter = userFilters.type && userFilters.type !== 'all' 
      ? `Tipo OBRIGAT√ìRIO: "${userFilters.type}"`
      : 'Tipos dispon√≠veis: movies, laws, books, series, data, research';
    
    // Add exclusion list if provided
    const exclusionNote = excludeTitles.length > 0
      ? `\n\n‚ö†Ô∏è N√ÉO GERAR OS SEGUINTES REPERT√ìRIOS J√Å EXIBIDOS:\n${excludeTitles.slice(0, 20).map(t => `- ${t}`).join('\n')}\n\nGere repert√≥rios DIFERENTES e COMPLEMENTARES aos listados acima.`
      : '';
    
    const categoryFilter = userFilters.category && userFilters.category !== 'all'
      ? `Categoria OBRIGAT√ìRIA: "${userFilters.category}"`
      : 'Categorias dispon√≠veis: education, technology, social, politics, culture, environment, health, economy';
    
    return `Voc√™ √© um especialista em repert√≥rios socioculturais para reda√ß√µes ENEM. Gere ${batchSize} repert√≥rios de alta qualidade e relev√¢ncia pedag√≥gica para o tema: "${query}"

CONFIGURA√á√ïES DE BUSCA:
${typeFilter}
${categoryFilter}
N√≠vel de popularidade: Conhecimentos amplamente reconhecidos e validados academicamente

INSTRU√á√ïES PARA A DESCRI√á√ÉO (CAMPO MAIS IMPORTANTE):
A descri√ß√£o deve ser COMPLETA e PR√ÅTICA em 3 partes sequenciais:

1Ô∏è‚É£ DADOS CONCRETOS (in√≠cio da descri√ß√£o):
   - Cite n√∫meros, percentuais, estat√≠sticas, datas, fatos espec√≠ficos
   - Use fontes quando relevante (IBGE, OMS, estudos, artigos de lei)
   - Exemplo: "Segundo dados do IBGE (2020), 23,9% das pessoas com defici√™ncia est√£o empregadas..."

2Ô∏è‚É£ CONTEXTO E RELEV√ÇNCIA (meio da descri√ß√£o):
   - Explique o que isso significa ou representa
   - Conecte com o tema da reda√ß√£o
   - Exemplo: "...evidenciando a desigualdade no mercado de trabalho brasileiro..."

3Ô∏è‚É£ COMO APLICAR NA REDA√á√ÉO (final da descri√ß√£o):
   - Indique em qual par√°grafo usar (introdu√ß√£o, desenvolvimento 1 ou 2, conclus√£o)
   - Mostre como conectar com argumentos
   - Exemplo: "...Use no D1 para fundamentar a exclus√£o social: 'Conforme dados do IBGE, apenas 23,9% das pessoas com defici√™ncia est√£o empregadas, comprovando a marginaliza√ß√£o desse grupo.'"

FORMATO JSON OBRIGAT√ìRIO:
[
  {
    "title": "Nome completo e espec√≠fico (obra, lei, evento, teoria, estudo, etc.)",
    "description": "Descri√ß√£o COMPLETA em 3 partes: [1) Dados concretos com n√∫meros e fontes] + [2) Contexto e significado] + [3) Como usar na reda√ß√£o com exemplo pr√°tico de aplica√ß√£o]. Total: 200-350 caracteres",
    "type": "${userFilters.type || 'books'}",
    "category": "${userFilters.category || 'education'}",
    "popularity": "popular",
    "year": "Ano relevante",
    "rating": 45,
    "keywords": ["palavra-chave1", "palavra-chave2", "palavra-chave3", "palavra-chave4"]
  }
]

EXEMPLOS DE DESCRI√á√ÉO IDEAL:
‚úÖ BOM: "A Lei n¬∫ 13.146/2015 (LBI) estabelece 8% de vagas para PCD em empresas com 100+ funcion√°rios, mas apenas 1% das vagas s√£o preenchidas (MTE, 2021). Evidencia o descumprimento legal. Use no D2: 'Apesar da LBI exigir 8% de vagas, apenas 1% s√£o ocupadas, revelando a inefic√°cia da fiscaliza√ß√£o.'"

‚ùå RUIM: "A Lei Brasileira de Inclus√£o estabelece direitos para pessoas com defici√™ncia e promove acessibilidade no mercado de trabalho."

CRIT√âRIOS DE QUALIDADE:
‚úÖ Repert√≥rios reais, verific√°veis e reconhecidos academicamente
‚úÖ Descri√ß√£o com dados + contexto + aplica√ß√£o pr√°tica
‚úÖ Indica√ß√£o clara de onde usar na reda√ß√£o (Intro/D1/D2/Conclus√£o)
‚úÖ Exemplo concreto de como escrever na reda√ß√£o
‚úÖ Linguagem acess√≠vel mas tecnicamente precisa
‚úÖ Foco na compet√™ncia 2 do ENEM (demonstrar conhecimento de mundo)
${exclusionNote}

IMPORTANTE: Responda APENAS com o JSON v√°lido, sem texto adicional. Cada descri√ß√£o deve ser auto-suficiente para o estudante saber EXATAMENTE como usar o repert√≥rio na reda√ß√£o sobre "${query}".`;
  }

  private parseRepertoireResponse(response: string, userFilters: any): any[] {
    try {
      // Remove all markdown code blocks (```json, ```, etc.)
      let cleanedResponse = response
        .replace(/```(?:json)?/g, '')
        .replace(/```/g, '')
        .trim();
      
      // Extract JSON array (GREEDY to get complete array, not truncated)
      const jsonMatch = cleanedResponse.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        cleanedResponse = jsonMatch[0];
      } else {
        throw new Error("No valid JSON array found in response");
      }
      
      // Clean up common formatting issues
      cleanedResponse = cleanedResponse
        .replace(/,(\s*[}\]])/g, '$1') // Remove trailing commas
        .replace(/([{,]\s*)(\w+):/g, '$1"$2":'); // Quote unquoted keys

      let repertoires;
      try {
        repertoires = JSON.parse(cleanedResponse);
      } catch (parseError: any) {
        console.error("‚ùå JSON parse error:", parseError.message);
        console.log(`üìÑ Attempted to parse (first 1000 chars):`, cleanedResponse.substring(0, 1000));
        
        // Try a more aggressive fix: recover incomplete JSON
        const lastCompleteObject = cleanedResponse.lastIndexOf('}');
        
        if (lastCompleteObject > 0) {
          // Always try to recover if we found at least one complete object
          let recovered = cleanedResponse.substring(0, lastCompleteObject + 1);
          
          // Check if the recovered string has closing bracket AFTER truncation
          const recoveredHasClosingBracket = recovered.trim().endsWith(']');
          
          // Add closing bracket if missing
          if (!recoveredHasClosingBracket) {
            recovered += '\n]';
          }
          
          console.log(`üîß Trying recovered JSON (truncated at last complete object)`);
          console.log(`üìÑ Recovery preview (last 200 chars): ...${recovered.substring(Math.max(0, recovered.length - 200))}`);
          
          try {
            repertoires = JSON.parse(recovered);
            console.log(`‚úÖ Successfully recovered and parsed JSON with ${Array.isArray(repertoires) ? repertoires.length : 0} repertoires`);
          } catch (e) {
            console.error("‚ùå Recovery also failed:", e);
            throw parseError; // If recovery doesn't help, throw original error
          }
        } else {
          throw parseError;
        }
      }
      
      // Validate and enhance repertoires
      const validRepertoires = (Array.isArray(repertoires) ? repertoires : [])
        .filter(rep => rep && rep.title && rep.description && rep.type)
        .map(rep => ({
          // Core fields (description now includes data + context + application)
          title: rep.title,
          description: rep.description,
          type: rep.type,
          category: rep.category,
          popularity: rep.popularity || 'popular',
          year: rep.year || '2020',
          rating: rep.rating || 42,
          keywords: Array.isArray(rep.keywords) ? rep.keywords : [],
          // Computed enhancement fields
          relevanceScore: this.calculateRelevanceScore(rep, userFilters),
          usageContext: this.generateUsageContext(rep)
        }))
        .filter(rep => {
          // Apply user filters
          if (userFilters.type && userFilters.type !== 'all' && rep.type !== userFilters.type) {
            return false;
          }
          if (userFilters.category && userFilters.category !== 'all' && rep.category !== userFilters.category) {
            return false;
          }
          return true;
        })
        .slice(0, 6); // Limit to batch size

      return validRepertoires;
      
    } catch (error) {
      console.error("‚ùå Failed to parse repertoire response:", error);
      console.error(`üìÑ Raw response (${response.length} chars total):`, response.substring(0, 800));
      console.error("üìÑ Response ends with:", response.substring(Math.max(0, response.length - 100)));
      // DO NOT use fallback - return empty array to force new AI generation
      return [];
    }
  }

  private calculateRelevanceScore(repertoire: any, filters: any): number {
    let score = 50; // Base score
    
    // Boost for specific type match
    if (filters.type && repertoire.type === filters.type) score += 20;
    
    // Boost for specific category match
    if (filters.category && repertoire.category === filters.category) score += 15;
    
    // Boost for more keywords
    if (repertoire.keywords && repertoire.keywords.length > 3) score += 10;
    
    // Boost for recent years
    const year = parseInt(repertoire.year) || 2000;
    if (year > 2010) score += 5;
    
    return Math.min(100, score);
  }

  private generateUsageContext(repertoire: any): string {
    const contexts: Record<string, string> = {
      'movies': 'Use no desenvolvimento para exemplificar quest√µes sociais atrav√©s da arte cinematogr√°fica',
      'books': 'Aplique na fundamenta√ß√£o te√≥rica ou como exemplo liter√°rio no desenvolvimento',
      'laws': 'Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres',
      'series': 'Empregue como reflexo de quest√µes contempor√¢neas no desenvolvimento',
      'research': 'Use para dados estat√≠sticos e fundamenta√ß√£o cient√≠fica',
      'data': 'Aplique para quantificar problemas e validar argumentos com n√∫meros'
    };
    
    return contexts[repertoire.type] || 'Use como fundamenta√ß√£o no desenvolvimento da reda√ß√£o';
  }

  private generateFallbackRepertoires(query: string, userFilters: any, count: number): any[] {
    return this.generateEnhancedFallbackRepertoires(query, userFilters, count);
  }

  private generateEnhancedFallbackRepertoires(query: string, userFilters: any, count: number): any[] {
    // Enhanced fallback repertoires with detailed pedagogical information
    const fallbackRepertoires = [
      {
        title: "Constitui√ß√£o Federal de 1988",
        description: "Artigo 205 estabelece educa√ß√£o como direito de todos e dever do Estado. Fundamental para argumentar sobre pol√≠ticas educacionais inclusivas e acessibilidade ao ensino.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre educa√ß√£o porque demonstra que o acesso ao ensino √© um direito constitucional garantido, legitimando pol√≠ticas de inclus√£o educacional.",
        type: "laws",
        category: "education",
        popularity: "very-popular",
        year: "1988",
        rating: 45,
        keywords: ["constitui√ß√£o", "educa√ß√£o", "direito", "fundamental", "estado"],
        pedagogicalTips: "Use para fundamentar propostas de pol√≠ticas p√∫blicas educacionais ou quando discutir responsabilidades do Estado na educa√ß√£o.",
        relevanceScore: 85,
        usageContext: "Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres"
      },
      {
        title: "Estatuto da Crian√ßa e do Adolescente (ECA)",
        description: "Lei 8.069/90 que garante prote√ß√£o integral a crian√ßas e adolescentes. Essencial para temas sobre pol√≠ticas sociais, prote√ß√£o infanto-juvenil e responsabilidade social.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre prote√ß√£o social porque demonstra que existe marco legal espec√≠fico para defender direitos de menores, validando pol√≠ticas de prote√ß√£o.",
        type: "laws", 
        category: "social",
        popularity: "popular",
        year: "1990",
        rating: 43,
        keywords: ["eca", "crian√ßa", "adolescente", "prote√ß√£o", "direitos"],
        pedagogicalTips: "Aplique quando discutir vulnerabilidade social, pol√≠ticas de prote√ß√£o ou responsabilidades familiares e estatais.",
        relevanceScore: 80,
        usageContext: "Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres"
      },
      {
        title: "Marco Civil da Internet",
        description: "Lei 12.965/2014 que estabelece princ√≠pios para uso da internet no Brasil, incluindo neutralidade de rede e prote√ß√£o de dados. Crucial para debates sobre tecnologia e regulamenta√ß√£o digital.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre tecnologia porque demonstra que existe legisla√ß√£o espec√≠fica para o ambiente digital, legitimando discuss√µes sobre regulamenta√ß√£o da internet.",
        type: "laws",
        category: "technology", 
        popularity: "moderate",
        year: "2014",
        rating: 40,
        keywords: ["internet", "neutralidade", "digital", "regula√ß√£o", "dados"],
        pedagogicalTips: "Use em temas sobre tecnologia, privacidade digital, regulamenta√ß√£o de redes sociais ou democratiza√ß√£o do acesso √† internet.",
        relevanceScore: 75,
        usageContext: "Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres"
      },
      {
        title: "Declara√ß√£o Universal dos Direitos Humanos",
        description: "Documento de 1948 da ONU que estabelece direitos fundamentais. Base para argumenta√ß√£o sobre dignidade humana, igualdade e justi√ßa social em qualquer contexto.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre direitos porque demonstra consenso mundial sobre dignidade humana, legitimando lutas por igualdade e justi√ßa social.",
        type: "laws",
        category: "social", 
        popularity: "very-popular",
        year: "1948",
        rating: 48,
        keywords: ["direitos", "humanos", "onu", "dignidade", "igualdade"],
        pedagogicalTips: "Aplic√°vel em praticamente qualquer tema social. Use para dar fundamento universal aos seus argumentos.",
        relevanceScore: 90,
        usageContext: "Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres"
      },
      {
        title: "Agenda 2030 - ODS",
        description: "Objetivos de Desenvolvimento Sustent√°vel da ONU com 17 metas globais. Excelente para temas ambientais, sociais e econ√¥micos, demonstrando compromisso internacional.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre sustentabilidade porque demonstra que existe plano global coordenado, legitimando pol√≠ticas ambientais e sociais integradas.",
        type: "research",
        category: "environment", 
        popularity: "popular",
        year: "2015",
        rating: 44,
        keywords: ["ods", "sustentabilidade", "onu", "desenvolvimento", "metas"],
        pedagogicalTips: "Use em temas ambientais, sociais ou econ√¥micos para mostrar perspectiva global e coordena√ß√£o internacional.",
        relevanceScore: 85,
        usageContext: "Use para dados estat√≠sticos e fundamenta√ß√£o cient√≠fica"
      }
    ];

    // Filter by user preferences with enhanced matching
    let filtered = fallbackRepertoires.filter(rep => {
      if (userFilters.type && userFilters.type !== 'all' && rep.type !== userFilters.type) {
        return false;
      }
      if (userFilters.category && userFilters.category !== 'all' && rep.category !== userFilters.category) {
        return false;
      }
      return true;
    });

    // If no matches after filtering, provide versatile universal repertoires
    if (filtered.length === 0) {
      filtered = [{
        title: "Lei de Diretrizes e Bases da Educa√ß√£o Nacional (LDB)",
        description: "Lei 9.394/96 que estabelece diretrizes e bases da educa√ß√£o nacional. Fundamental para discuss√µes sobre reformas educacionais, inclus√£o e qualidade do ensino.",
        applicationExample: "Este repert√≥rio fortalece argumentos sobre educa√ß√£o porque demonstra que existe marco legal espec√≠fico para o sistema educacional, legitimando reformas e pol√≠ticas educacionais.",
        type: userFilters.type || "laws",
        category: userFilters.category || "education", 
        popularity: "popular",
        year: "1996",
        rating: 42,
        keywords: ["ldb", "educa√ß√£o", "ensino", "diretrizes", "nacional"],
        pedagogicalTips: "Use para fundamentar argumentos sobre reformas educacionais, democratiza√ß√£o do ensino ou pol√≠ticas pedag√≥gicas.",
        relevanceScore: 78,
        usageContext: "Utilize na proposta de interven√ß√£o ou para fundamentar direitos e deveres"
      }];
    }

    return filtered.slice(0, count);
  }

  private calculateRepertoireTokensSaved(query: string, userFilters: any, batchSize: number): number {
    // Estimate tokens saved by optimization
    const originalPromptTokens = this.estimateTokens(this.buildOriginalRepertoirePrompt(query, userFilters, batchSize));
    const optimizedPromptTokens = this.estimateTokens(this.buildOptimizedRepertoirePrompt(query, userFilters, batchSize));
    
    return Math.max(0, originalPromptTokens - optimizedPromptTokens);
  }

  private buildOriginalRepertoirePrompt(query: string, userFilters: any, batchSize: number): string {
    // Simulate original verbose prompt for comparison
    return `
Gere repert√≥rios relevantes para esta consulta de reda√ß√£o:

Consulta: "${query}"
Palavras-chave: [extracted keywords]
${userFilters.type ? `TIPO OBRIGAT√ìRIO: ${userFilters.type} (gere APENAS deste tipo)` : 'Tipos sugeridos: movies, laws, books, series, documentaries, research, data'}
${userFilters.category ? `CATEGORIA OBRIGAT√ìRIA: ${userFilters.category} (gere APENAS desta categoria)` : 'Categorias sugeridas: social, environment, technology, education, politics, economy, culture, health, ethics, globalization'}
${userFilters.popularity ? `POPULARIDADE OBRIGAT√ìRIA: ${userFilters.popularity}` : ''}

Crie EXATAMENTE ${batchSize} repert√≥rios diversos e relevantes. Responda APENAS em formato JSON v√°lido:

{
  "repertoires": [
    {
      "title": "T√≠tulo exato do repert√≥rio",
      "description": "Descri√ß√£o completa e detalhada explicando: 1) O que √© este repert√≥rio, 2) Como us√°-lo efetivamente em reda√ß√µes, 3) Em quais temas se aplica, 4) Quais argumentos e perspectivas oferece, 5) Dicas pr√°ticas de aplica√ß√£o e contextos onde √© mais poderoso (200-400 caracteres)",
      "type": "um dos tipos: movies, laws, books, news, events, music, series, documentaries, research, data",
      "category": "uma das categorias: social, environment, technology, education, politics, economy, culture, health, ethics, globalization", 
      "popularity": "um dos n√≠veis: very-popular, popular, moderate, uncommon, rare",
      "year": "ano como string ou per√≠odo",
      "rating": n√∫mero de 30-50,
      "keywords": ["palavra1", "palavra2", "palavra3", "palavra4", "palavra5"]
    }
  ]
}

REGRAS IMPORTANTES:
- Repert√≥rios reais e verific√°veis (n√£o ficcionais)
- Variados em tipos (livros, leis, filmes, pesquisas, dados, etc.)
- T√≠tulos espec√≠ficos e n√£o gen√©ricos
- Descri√ß√µes educativas e pr√°ticas
- Diversidade tem√°tica e de popularidade
- JSON v√°lido e bem formatado`;
  }

  // Get optimization statistics
  getOptimizationStats(): any {
    return {
      cacheStats: intelligentCache.getCacheStats(),
      compressionEnabled: true,
      promptOptimizationEnabled: true,
      estimatedTokenSavings: '60-70%',
      fallbackMode: !this.hasApiKey
    };
  }
}

// Context compression extension for ContextCompressor
declare module './context-compressor' {
  interface ContextCompressor {
    compressStructuresContext(structures: any[]): string;
    compressChatContext(summary: string | null, recentMessages: any[], section: string, context: any): string;
  }
}

// Extend ContextCompressor with structure compression capability
contextCompressor.compressStructuresContext = function(structures: any[]): string {
  if (structures.length === 0) return '';
  
  const compressed = structures.slice(0, 2).map(struct => {
    const sections = Array.isArray(struct.sections) ? struct.sections.length : 0;
    return `"${struct.name}" (${sections} se√ß√µes)`;
  }).join(', ');
  
  return `Estruturas ref: ${compressed}`;
};

// Extend ContextCompressor with chat context compression capability
contextCompressor.compressChatContext = function(summary: string | null, recentMessages: any[], section: string, context: any): string {
  let compressed = '';
  
  // Compress conversation summary
  if (summary && summary.length > 100) {
    compressed += `Hist√≥rico: ${summary.substring(0, 80)}...`;
  }
  
  // Compress recent messages (only last 3 most relevant)
  if (recentMessages && recentMessages.length > 0) {
    const lastUserMessage = recentMessages.filter(msg => msg.type === 'user').slice(-1)[0];
    const lastAiMessage = recentMessages.filter(msg => msg.type === 'ai').slice(-1)[0];
    
    if (lastUserMessage) {
      compressed += `\n√öltima pergunta: "${lastUserMessage.content.substring(0, 60)}..."`;
    }
    if (lastAiMessage) {
      compressed += `\n√öltima resposta: "${lastAiMessage.content.substring(0, 60)}..."`;
    }
  }
  
  // Add current user message
  const currentMessage = recentMessages?.find(msg => msg.type === 'user')?.content || '';
  if (currentMessage) {
    compressed += `\nATUAL: "${currentMessage}"`;
  }
  
  return compressed || 'Nova conversa';
};

// Singleton instance
export const optimizedAnalysisService = new OptimizedAnalysisService();