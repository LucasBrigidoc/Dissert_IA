import { GoogleGenerativeAI } from "@google/generative-ai";

export class GeminiService {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;
  private readonly hasApiKey: boolean;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    this.hasApiKey = !!apiKey;
    
    if (apiKey) {
      try {
        this.genAI = new GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash-lite" });
      } catch (error) {
        console.warn("‚ö†Ô∏è Failed to initialize Gemini AI in GeminiService:", error);
        this.hasApiKey = false;
      }
    }
  }

  // Normalize query for consistent cache keys
  normalizeQuery(query: string): string {
    return query
      .toLowerCase()
      .trim()
      .replace(/[^\w\s]/g, '') // Remove special characters
      .replace(/\s+/g, ' ') // Normalize spaces
      .substring(0, 100); // Limit length
  }

  // Local analysis of search queries (no AI tokens used)
  analyzeSearchQueryLocal(query: string): any {
    const normalizedQuery = query.toLowerCase();
    
    // Extract keywords
    const keywords = normalizedQuery
      .split(/\s+/)
      .filter(word => word.length > 2)
      .filter(word => !['para', 'sobre', 'como', 'que', 'com', 'uma', 'das', 'dos', 'ser'].includes(word));

    // Suggest types based on keywords
    const suggestedTypes = [];
    if (keywords.some(k => ['filme', 'cinema', 'movie'].includes(k))) suggestedTypes.push('movies');
    if (keywords.some(k => ['lei', 'codigo', 'legal', 'juridico'].includes(k))) suggestedTypes.push('laws');
    if (keywords.some(k => ['livro', 'autor', 'literatura'].includes(k))) suggestedTypes.push('books');
    if (keywords.some(k => ['serie', 'tv', 'netflix'].includes(k))) suggestedTypes.push('series');
    if (keywords.some(k => ['pesquisa', 'estudo', 'dados', 'estatistica'].includes(k))) suggestedTypes.push('research');
    if (keywords.some(k => ['noticia', 'jornal', 'imprensa'].includes(k))) suggestedTypes.push('news');
    
    if (suggestedTypes.length === 0) {
      suggestedTypes.push('movies', 'books', 'research'); // Default suggestions
    }

    // Suggest categories based on keywords  
    const suggestedCategories = [];
    if (keywords.some(k => ['ambiente', 'sustentabilidade', 'ecologia', 'clima'].includes(k))) suggestedCategories.push('environment');
    if (keywords.some(k => ['tecnologia', 'digital', 'internet', 'ia'].includes(k))) suggestedCategories.push('technology');
    if (keywords.some(k => ['educacao', 'escola', 'ensino', 'professor'].includes(k))) suggestedCategories.push('education');
    if (keywords.some(k => ['saude', 'medicina', 'hospital', 'doenca'].includes(k))) suggestedCategories.push('health');
    if (keywords.some(k => ['politica', 'governo', 'eleicao', 'democracia'].includes(k))) suggestedCategories.push('politics');
    if (keywords.some(k => ['economia', 'trabalho', 'emprego', 'renda'].includes(k))) suggestedCategories.push('economy');
    if (keywords.some(k => ['cultura', 'arte', 'musica', 'teatro'].includes(k))) suggestedCategories.push('culture');
    if (keywords.some(k => ['social', 'sociedade', 'direitos', 'igualdade'].includes(k))) suggestedCategories.push('social');
    
    if (suggestedCategories.length === 0) {
      suggestedCategories.push('social', 'education', 'technology'); // Default suggestions
    }

    return {
      keywords,
      suggestedTypes,
      suggestedCategories,
      queryComplexity: keywords.length > 3 ? 'complex' : 'simple',
      searchIntent: this.determineSearchIntent(normalizedQuery)
    };
  }

  // Local analysis of proposal search queries 
  analyzeProposalSearchLocal(query: string): any {
    const normalizedQuery = query.toLowerCase();
    
    // Extract keywords
    const keywords = normalizedQuery
      .split(/\s+/)
      .filter(word => word.length > 2)
      .filter(word => !['para', 'sobre', 'como', 'que', 'com', 'uma', 'das', 'dos', 'ser', 'redacao', 'tema'].includes(word));

    // Determine exam types based on keywords
    const suggestedExamTypes = [];
    if (keywords.some(k => ['enem', 'vestibular', 'universidade'].includes(k))) {
      suggestedExamTypes.push('enem', 'vestibular');
    } else if (keywords.some(k => ['concurso', 'publico', 'cargo', 'cnu', 'cespe', 'fcc', 'vunesp', 'ibfc', 'quadrix', 'cebraspe'].includes(k))) {
      suggestedExamTypes.push('concurso');
    } else {
      suggestedExamTypes.push('enem', 'vestibular'); // Default
    }

    // Suggest themes based on keywords
    const suggestedThemes = [];
    if (keywords.some(k => ['tecnologia', 'digital', 'internet', 'inteligencia', 'artificial'].includes(k))) suggestedThemes.push('technology');
    if (keywords.some(k => ['ambiente', 'sustentabilidade', 'clima', 'preservacao'].includes(k))) suggestedThemes.push('environment');
    if (keywords.some(k => ['educacao', 'ensino', 'escola', 'conhecimento'].includes(k))) suggestedThemes.push('education');
    if (keywords.some(k => ['saude', 'medicina', 'bem-estar', 'pandemia'].includes(k))) suggestedThemes.push('health');
    if (keywords.some(k => ['politica', 'cidadania', 'democracia', 'direitos'].includes(k))) suggestedThemes.push('politics');
    if (keywords.some(k => ['economia', 'trabalho', 'desemprego', 'renda'].includes(k))) suggestedThemes.push('economy');
    if (keywords.some(k => ['cultura', 'diversidade', 'identidade', 'tradicao'].includes(k))) suggestedThemes.push('culture');
    if (keywords.some(k => ['violencia', 'seguranca', 'criminalidade', 'drogas'].includes(k))) suggestedThemes.push('social');
    
    if (suggestedThemes.length === 0) {
      suggestedThemes.push('social', 'technology', 'education'); // Default themes
    }

    return {
      keywords,
      suggestedExamTypes,
      suggestedThemes,
      difficulty: keywords.length > 4 ? 'dificil' : 'medio',
      searchComplexity: this.determineProposalComplexity(normalizedQuery)
    };
  }

  // Search for real exam proposals using Gemini's knowledge
  async searchRealProposalsFromKnowledge(query: string, examType?: string, year?: number): Promise<any> {
    if (!this.hasApiKey || !this.model) {
      console.log('‚ö†Ô∏è Cannot search real proposals: Gemini API not available');
      return { found: false, proposals: [], similarProposals: [] };
    }

    try {
      console.log(`üß† Asking Gemini if it knows about real exam: "${query}"`);
      
      // Ask Gemini directly about its knowledge of this specific exam
      const searchPrompt = `Voc√™ tem conhecimento EXATO e VERIFIC√ÅVEL sobre a prova "${query}"?

‚ö†Ô∏è **REGRAS CR√çTICAS - LEIA COM ATEN√á√ÉO:**

1. **ZERO TOLER√ÇNCIA A INFORMA√á√ïES IMPRECISAS:**
   - Se voc√™ N√ÉO tem certeza ABSOLUTA da proposta de reda√ß√£o dessa prova espec√≠fica, marque found: false
   - NUNCA invente, estime ou "aproxime" informa√ß√µes
   - NUNCA confunda com propostas de outros anos do mesmo exame
   - NUNCA misture temas de provas diferentes

2. **SE VOC√ä CONHECE ESSA PROVA ESPEC√çFICA (found: true):**
   - Voc√™ DEVE ter o t√≠tulo EXATO da proposta de reda√ß√£o
   - Voc√™ DEVE ter o comando COMPLETO e LITERAL da reda√ß√£o (n√£o parafraseado)
   - Voc√™ DEVE ter os textos de apoio que foram fornecidos na prova (se houver)
   - Voc√™ DEVE ter certeza ABSOLUTA do ano correto
   - Voc√™ DEVE verificar que tudo corresponde EXATAMENTE √† prova "${query}"

3. **SE VOC√ä N√ÉO CONHECE ESSA PROVA ESPEC√çFICA (found: false):**
   - Marque found: false imediatamente
   - N√ÉO tente criar uma proposta gen√©rica
   - OPCIONALMENTE, sugira propostas REAIS de provas SIMILARES que voc√™ conhece com certeza
   - Deixe claro que s√£o provas DIFERENTES

4. **VALIDA√á√ÉO OBRIGAT√ìRIA:**
   - Verifique se o examName retornado √â EXATAMENTE "${query}"
   - Verifique se o year retornado corresponde ao ano pesquisado${year ? ` (deve ser ${year})` : ''}
   - Verifique se o t√≠tulo da proposta FAZ SENTIDO para esse exame e ano espec√≠ficos

**EXEMPLO DE RESPOSTA CORRETA (found: true):**
Prova pesquisada: "ENEM 2022"
- Voc√™ TEM CERTEZA ABSOLUTA que o tema foi "Desafios para a valoriza√ß√£o de comunidades e povos tradicionais no Brasil"
- Voc√™ TEM o comando exato: "A partir da leitura dos textos motivadores... desenvolva um texto dissertativo-argumentativo..."
- Voc√™ TEM os textos de apoio que foram fornecidos
- Voc√™ VERIFICOU que este tema √© especificamente do ENEM 2022, N√ÉO de outro ano

**EXEMPLO DE RESPOSTA CORRETA (found: true):**
Prova pesquisada: "ENEM 2023"
- Voc√™ TEM CERTEZA ABSOLUTA que o tema foi "Desafios para o enfrentamento da invisibilidade do trabalho de cuidado realizado pela mulher no Brasil"
- Voc√™ TEM o comando exato da prova de 2023
- Voc√™ VERIFICOU que N√ÉO √© "Desafios da persist√™ncia da viol√™ncia contra a mulher" (que foi em 2015)
- Voc√™ VERIFICOU que este tema √© especificamente do ENEM 2023, N√ÉO de 2015, 2022 ou outro ano

**EXEMPLO DE RESPOSTA INCORRETA (N√ÉO FA√áA ASSIM):**
Prova pesquisada: "ENEM 2023"
- Voc√™ retorna "Desafios da persist√™ncia da viol√™ncia contra a mulher" pensando que √© 2023, mas NA VERDADE √© do ENEM 2015 ‚ùå
- Voc√™ retorna uma proposta do ENEM 2022 pensando que √© 2023 ‚ùå
- Voc√™ retorna um tema "parecido" mas n√£o √© o tema real daquele ano espec√≠fico ‚ùå
- Voc√™ inventa um comando gen√©rico de reda√ß√£o ‚ùå

‚ö†Ô∏è ATEN√á√ÉO CR√çTICA: O ENEM tem propostas SIMILARES em anos DIFERENTES. NUNCA confunda:
- ENEM 2015: "Desafios da persist√™ncia da viol√™ncia contra a mulher na sociedade brasileira"
- ENEM 2023: "Desafios para o enfrentamento da invisibilidade do trabalho de cuidado realizado pela mulher no Brasil"
S√£o temas DIFERENTES de anos DIFERENTES! Verifique o ANO correto!

Responda APENAS com JSON v√°lido no formato:

{
  "found": true ou false,
  "confidence": "alta, media ou baixa - o quanto voc√™ tem certeza (OBRIGAT√ìRIO: se n√£o for 'alta', marque found: false)",
  "message": "Explica√ß√£o clara: se encontrou, confirme o ano e exame. Se n√£o encontrou, explique por qu√™",
  "proposals": [
    {
      "title": "T√≠tulo LITERAL e EXATO da proposta de reda√ß√£o (n√£o parafraseie)",
      "statement": "Comando COMPLETO e LITERAL da reda√ß√£o, exatamente como foi cobrado na prova (n√£o parafraseie)",
      "supportingText": "Textos de apoio COMPLETOS fornecidos na prova original (transcreva literalmente ou indique 'N√£o dispon√≠vel' se n√£o souber)",
      "examName": "Nome EXATO como aparece oficialmente - PREENCHA COM O VALOR REAL, N√ÉO copie '${query}' se n√£o souber",
      "examType": "Tipo EXATO (enem, fuvest, unicamp, etc) - PREENCHA COM O VALOR REAL",
      "theme": "tema (social, technology, environment, education, culture, health, politics, economy)",
      "difficulty": "facil, medio ou dificil",
      "year": "Ano NUM√âRICO EXATO da prova - PREENCHA COM O ANO REAL, N√ÉO invente"
    }
  ],
  "similarProposals": [
    // APENAS se N√ÉO conhece a prova espec√≠fica (found: false), liste propostas REAIS e VERIFIC√ÅVEIS de provas similares
    {
      "title": "T√≠tulo EXATO de prova similar que voc√™ CONHECE COM CERTEZA",
      "statement": "Comando LITERAL da reda√ß√£o",
      "supportingText": "Textos de apoio ou 'N√£o dispon√≠vel'",
      "examName": "Nome EXATO da prova (ex: ENEM 2021, FUVEST 2023)",
      "examType": "enem, fuvest, unicamp, etc",
      "theme": "tema",
      "difficulty": "facil, medio ou dificil",
      "year": "ano EXATO num√©rico"
    }
  ]
}

‚ö†Ô∏è VALIDA√á√ÉO FINAL: Se voc√™ marcou found: true mas confidence N√ÉO √© "alta", voc√™ DEVE mudar found para false!

‚ö†Ô∏è LEMBRE-SE: √â MELHOR retornar found: false do que retornar informa√ß√µes INCORRETAS ou IMPRECISAS!`;

      const result = await this.model.generateContent(searchPrompt);
      const response = result.response.text();
      
      // Extract token usage metadata from Gemini response
      // Use totalTokenCount as authoritative source (matches Google AI Studio exactly)
      const usageMetadata = result.response.usageMetadata || {};
      const rawPromptTokens = usageMetadata.promptTokenCount || 0;
      const rawOutputTokensValue = usageMetadata.candidatesTokenCount;
      const rawOutputTokens = Array.isArray(rawOutputTokensValue) 
        ? rawOutputTokensValue.reduce((sum: number, count: number) => sum + (count || 0), 0)
        : (rawOutputTokensValue || 0);
      const totalTokens = usageMetadata.totalTokenCount || 0;
      
      // Reconcile component tokens to match official totalTokenCount (includes system tokens)
      let promptTokens = rawPromptTokens;
      let outputTokens = rawOutputTokens;
      
      if (totalTokens > 0 && (rawPromptTokens + rawOutputTokens) !== totalTokens) {
        // Total is authoritative - adjust components proportionally to match
        const rawSum = rawPromptTokens + rawOutputTokens;
        if (rawSum > 0) {
          const ratio = totalTokens / rawSum;
          promptTokens = Math.round(rawPromptTokens * ratio);
          outputTokens = totalTokens - promptTokens; // Ensure exact match
        } else {
          // No component data, estimate 70/30 split
          promptTokens = Math.floor(totalTokens * 0.7);
          outputTokens = totalTokens - promptTokens;
        }
      }
      
      console.log(`üìñ Gemini knowledge response - Tokens: prompt=${promptTokens}, output=${outputTokens}, total=${totalTokens} (Google AI Studio compatible)`);
      
      // Parse response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.log('‚ö†Ô∏è No JSON found in Gemini response');
        return { found: false, proposals: [], similarProposals: [], tokensUsed: totalTokens, promptTokens, outputTokens };
      }
      
      const parsed = JSON.parse(jsonMatch[0]);
      
      // Log the raw response from Gemini for debugging
      console.log(`üìã Gemini raw response for "${query}":`, JSON.stringify(parsed, null, 2));
      
      // üõ°Ô∏è RUNTIME VALIDATION: Enforce accuracy requirements
      if (parsed.found && parsed.proposals && parsed.proposals.length > 0) {
        // Validation 0: Confidence field is MANDATORY
        if (!parsed.confidence || parsed.confidence !== 'alta') {
          const confidenceValue = parsed.confidence || 'missing';
          console.log(`‚ö†Ô∏è Gemini confidence is "${confidenceValue}" (not "alta") - treating as NOT FOUND to prevent inaccuracies`);
          parsed.found = false;
          // Move proposals to similarProposals since they're uncertain
          if (!parsed.similarProposals) parsed.similarProposals = [];
          parsed.similarProposals = [...parsed.similarProposals, ...parsed.proposals];
          parsed.proposals = [];
        } else {
          // Extract expected year from query if not provided as parameter
          const normalizedQuery = query.toLowerCase().trim();
          let expectedYear = year;
          
          if (!expectedYear) {
            // Try to extract year from query using regex (e.g., "enem 2022", "fuvest 2023")
            const yearMatch = query.match(/\b(19\d{2}|20\d{2})\b/);
            if (yearMatch) {
              expectedYear = parseInt(yearMatch[1]);
              console.log(`üìÖ Extracted year ${expectedYear} from query "${query}"`);
            }
          }
          
          // Validation 2: Verify year and examName match expectations
          for (const proposal of parsed.proposals) {
            let validationFailed = false;
            
            // CRITICAL: If we expect a year, proposal MUST have a year field
            if (expectedYear && !proposal.year) {
              console.log(`‚ö†Ô∏è Proposal is missing year field but we expect year ${expectedYear} - rejecting`);
              validationFailed = true;
            }
            
            // Check if year is provided and is numeric
            if (proposal.year) {
              const proposalYear = parseInt(String(proposal.year));
              if (isNaN(proposalYear)) {
                console.log(`‚ö†Ô∏è Proposal year "${proposal.year}" is not numeric - rejecting`);
                validationFailed = true;
              } else {
                // If we have an expected year (from param or query), verify it matches
                if (expectedYear && proposalYear !== expectedYear) {
                  console.log(`‚ö†Ô∏è Proposal year ${proposalYear} doesn't match expected year ${expectedYear} - rejecting`);
                  validationFailed = true;
                }
                
                // Year should be reasonable (between 1990 and current year + 1)
                const currentYear = new Date().getFullYear();
                if (proposalYear < 1990 || proposalYear > currentYear + 1) {
                  console.log(`‚ö†Ô∏è Proposal year ${proposalYear} is unrealistic - rejecting`);
                  validationFailed = true;
                }
              }
            }
            
            // Check if examName matches query (including year if present)
            if (proposal.examName) {
              const proposalExamNormalized = proposal.examName.toLowerCase().trim();
              
              // Extract year from proposal examName
              const proposalExamYearMatch = proposal.examName.match(/\b(19\d{2}|20\d{2})\b/);
              const proposalExamYear = proposalExamYearMatch ? parseInt(proposalExamYearMatch[1]) : null;
              
              // CRITICAL: If we expect a year, examName MUST contain that year
              if (expectedYear && !proposalExamYear) {
                console.log(`‚ö†Ô∏è Proposal examName "${proposal.examName}" is missing year but we expect ${expectedYear} - rejecting`);
                validationFailed = true;
              }
              
              // If we expect a year and proposal examName has a year, they must match
              if (expectedYear && proposalExamYear && proposalExamYear !== expectedYear) {
                console.log(`‚ö†Ô∏è Proposal examName "${proposal.examName}" has year ${proposalExamYear} but expected ${expectedYear} - rejecting`);
                validationFailed = true;
              }
              
              // Check if key exam identifier (e.g., "enem", "fuvest") matches
              const queryParts = normalizedQuery.split(/\s+/).filter((p: string) => p.length > 2 && !/^\d+$/.test(p));
              const examParts = proposalExamNormalized.split(/\s+/).filter((p: string) => p.length > 2 && !/^\d+$/.test(p));
              const hasExamMatch = queryParts.some((qp: string) => examParts.some((ep: string) => 
                qp.includes(ep) || ep.includes(qp)
              ));
              
              if (!hasExamMatch) {
                console.log(`‚ö†Ô∏è Proposal examName "${proposal.examName}" doesn't match query "${query}" (exam identifier mismatch) - rejecting`);
                validationFailed = true;
              }
            } else if (expectedYear) {
              // If we expect a year but examName is missing, reject
              console.log(`‚ö†Ô∏è Proposal is missing examName field but we expect specific exam with year ${expectedYear} - rejecting`);
              validationFailed = true;
            }
            
            if (validationFailed) {
              console.log(`üö´ Validation failed for proposal "${proposal.title}" (examName: "${proposal.examName}", year: ${proposal.year}) - treating as NOT FOUND`);
              parsed.found = false;
              if (!parsed.similarProposals) parsed.similarProposals = [];
              parsed.similarProposals.push(proposal);
              parsed.proposals = parsed.proposals.filter((p: any) => p !== proposal);
            } else {
              console.log(`‚úÖ Validation passed for proposal "${proposal.title}" (examName: "${proposal.examName}", year: ${proposal.year})`);
            }
          }
          
          // If all proposals were rejected, mark as not found
          if (parsed.proposals.length === 0) {
            parsed.found = false;
            console.log(`‚ö†Ô∏è All proposals rejected by validation - marking as NOT FOUND`);
          }
        }
      }
      
      if (parsed.found && parsed.proposals && parsed.proposals.length > 0) {
        console.log(`‚úÖ Gemini generated ${parsed.proposals.length} VALIDATED proposal(s) based on knowledge`);
        return {
          found: true,
          proposals: parsed.proposals.map((p: any) => ({
            ...p,
            isAiGenerated: false,
            source: 'gemini_knowledge'
          })),
          similarProposals: [],
          message: parsed.message,
          tokensUsed: totalTokens,
          promptTokens,
          outputTokens
        };
      } else if (!parsed.found && parsed.similarProposals && parsed.similarProposals.length > 0) {
        console.log(`‚ÑπÔ∏è Gemini generated ${parsed.similarProposals.length} similar proposal(s)`);
        return {
          found: false,
          proposals: [],
          similarProposals: parsed.similarProposals.map((p: any) => ({
            ...p,
            isAiGenerated: false,
            source: 'gemini_knowledge_similar'
          })),
          message: parsed.message || `N√£o encontrei informa√ß√µes sobre ${query}, mas conhe√ßo estas provas similares:`,
          tokensUsed: totalTokens,
          promptTokens,
          outputTokens
        };
      }
      
      console.log(`‚ÑπÔ∏è Gemini doesn't have knowledge about this exam`);
      return {
        found: false,
        proposals: [],
        similarProposals: [],
        message: parsed.message || 'N√£o encontrei essa prova espec√≠fica no meu conhecimento',
        tokensUsed: totalTokens,
        promptTokens,
        outputTokens
      };
      
    } catch (error) {
      console.error('Error searching real proposals from Gemini knowledge:', error);
      return { found: false, proposals: [], similarProposals: [], tokensUsed: 0, promptTokens: 0, outputTokens: 0 };
    }
  }

  // Generate proposals batch using AI
  async generateProposalsBatch(config: any, keywords: string[] = []): Promise<{ proposals: any[], tokensUsed: number, promptTokens: number, outputTokens: number }> {
    if (!this.hasApiKey || !this.model) {
      // Fallback proposals without AI
      return {
        proposals: this.getFallbackProposals(config),
        tokensUsed: 0,
        promptTokens: 0,
        outputTokens: 0
      };
    }

    try {
      const prompt = this.buildProposalGenerationPrompt(config, keywords);
      
      console.log(`üéØ Generating proposals with Gemini AI (${config.examType} - ${config.theme})`);
      
      const result = await this.model.generateContent(prompt);
      const response = result.response.text();
      
      // Extract token usage metadata from Gemini response
      // Use totalTokenCount as authoritative source (matches Google AI Studio exactly)
      const usageMetadata = result.response.usageMetadata || {};
      const rawPromptTokens = usageMetadata.promptTokenCount || 0;
      const rawOutputTokensValue = usageMetadata.candidatesTokenCount;
      const rawOutputTokens = Array.isArray(rawOutputTokensValue) 
        ? rawOutputTokensValue.reduce((sum: number, count: number) => sum + (count || 0), 0)
        : (rawOutputTokensValue || 0);
      const totalTokens = usageMetadata.totalTokenCount || 0;
      
      // Reconcile component tokens to match official totalTokenCount (includes system tokens)
      let promptTokens = rawPromptTokens;
      let outputTokens = rawOutputTokens;
      
      if (totalTokens > 0 && (rawPromptTokens + rawOutputTokens) !== totalTokens) {
        // Total is authoritative - adjust components proportionally to match
        const rawSum = rawPromptTokens + rawOutputTokens;
        if (rawSum > 0) {
          const ratio = totalTokens / rawSum;
          promptTokens = Math.round(rawPromptTokens * ratio);
          outputTokens = totalTokens - promptTokens; // Ensure exact match
        } else {
          // No component data, estimate 70/30 split
          promptTokens = Math.floor(totalTokens * 0.7);
          outputTokens = totalTokens - promptTokens;
        }
      }
      
      console.log(`üìä Gemini Proposal Generation - Tokens: prompt=${promptTokens}, output=${outputTokens}, total=${totalTokens} (Google AI Studio compatible)`);
      
      // Parse AI response
      const proposals = this.parseProposalsResponse(response, config);
      
      console.log(`‚úÖ Generated ${proposals.length} proposals successfully`);
      
      return {
        proposals,
        tokensUsed: totalTokens,
        promptTokens,
        outputTokens
      };
      
    } catch (error) {
      console.error("Error in AI proposal generation:", error);
      return {
        proposals: this.getFallbackProposals(config),
        tokensUsed: 0,
        promptTokens: 0,
        outputTokens: 0
      };
    }
  }

  private determineSearchIntent(query: string): string {
    if (query.includes('exemplo') || query.includes('modelo')) return 'examples';
    if (query.includes('melhor') || query.includes('top') || query.includes('famoso')) return 'popular';
    if (query.includes('recente') || query.includes('atual') || query.includes('novo')) return 'recent';
    return 'general';
  }

  private determineProposalComplexity(query: string): string {
    const complexWords = ['implementacao', 'desenvolvimento', 'impactos', 'consequencias', 'analise', 'discussao'];
    const hasComplexWords = complexWords.some(word => query.includes(word));
    return hasComplexWords ? 'complex' : 'simple';
  }

  private buildProposalGenerationPrompt(config: any, keywords: string[]): string {
    const keywordString = keywords.length > 0 ? keywords.join(', ') : 'geral';
    const hasContext = config.context && config.context.trim().length > 0;
    
    const contextInstructions = hasContext 
      ? `\n\nüìã TEXTO BASE FORNECIDO PELO USU√ÅRIO:\n"${config.context}"\n\nüéØ INSTRU√á√ÉO ESPECIAL: Use o texto base acima como INSPIRA√á√ÉO e REFER√äNCIA para criar propostas DIFERENTES mas RELACIONADAS ao tema. Mantenha o estilo e a qualidade, mas crie varia√ß√µes melhoradas com:\n- Novo enfoque ou perspectiva sobre o tema\n- Textos de apoio diferentes e complementares\n- Abordagem mais profunda ou alternativa\n- N√ÉO copie o texto base, apenas use-o como inspira√ß√£o\n`
      : '';
    
    return `Gere 2 propostas de reda√ß√£o completas e realistas para ${config.examType} sobre o tema "${config.theme}".

CONFIGURA√á√ÉO:
- Tipo de exame: ${config.examType}
- Tema: ${config.theme}
- Dificuldade: ${config.difficulty || 'medio'}
- Palavras-chave: ${keywordString}${contextInstructions}

Responda APENAS com JSON v√°lido no formato:

{
  "proposals": [
    {
      "title": "T√≠tulo espec√≠fico da proposta",
      "statement": "Comando CURTO da reda√ß√£o (m√°ximo 2-3 linhas, direto ao ponto)",
      "supportingText": "Textos de apoio com dados, cita√ß√µes ou contexto relevante",
      "examType": "${config.examType}",
      "theme": "${config.theme}",
      "difficulty": "${config.difficulty || 'medio'}",
      "year": "2024"
    }
  ]
}

INSTRU√á√ïES IMPORTANTES:
- Propostas realistas como em provas oficiais
- "statement" deve ser MUITO CURTO (m√°ximo 2-3 linhas), apenas a instru√ß√£o principal
- Exemplo de "statement" curto: "Redija um texto dissertativo-argumentativo sobre os impactos da tecnologia digital na democracia moderna."
- N√ÉO fa√ßa o "statement" longo com v√°rias frases explicativas
- Textos de apoio informativos e atuais
- Temas relevantes para ${config.examType}
- Responda APENAS o JSON, sem texto adicional`;
  }

  private cleanSupportingText(supportingText: string): string {
    if (!supportingText) return "";
    
    try {
      // Check if it's a JSON string that needs parsing
      if (supportingText.startsWith('{') || supportingText.startsWith('[')) {
        const parsed = JSON.parse(supportingText);
        
        // If it's an array of content objects
        if (Array.isArray(parsed)) {
          return parsed
            .map((item: any) => item.content || item.text || '')
            .filter(Boolean)
            .join('\n\n');
        }
        
        // If it's a single object with content
        if (parsed.type === 'paragraph' && parsed.content) {
          return parsed.content;
        }
        
        // If it has a content field
        if (parsed.content) {
          return typeof parsed.content === 'string' 
            ? parsed.content 
            : JSON.stringify(parsed.content);
        }
      }
      
      // Return as is if it's already clean text
      return supportingText;
    } catch (e) {
      // If parsing fails, return the original text
      return supportingText;
    }
  }

  private parseProposalsResponse(response: string, config: any): any[] {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in response");
      }
      
      const parsed = JSON.parse(jsonMatch[0]);
      
      if (parsed.proposals && Array.isArray(parsed.proposals)) {
        return parsed.proposals.map((proposal: any) => ({
          title: proposal.title || `Proposta sobre ${config.theme}`,
          statement: proposal.statement || `Redija um texto dissertativo-argumentativo sobre ${config.theme}.`,
          supportingText: this.cleanSupportingText(proposal.supportingText) || "Considere os aspectos sociais, econ√¥micos e culturais do tema.",
          examType: config.examType || 'enem',
          theme: config.theme || 'social',
          difficulty: config.difficulty || 'medio',
          year: '2024',
          isAiGenerated: true
        }));
      }
      
      throw new Error("Invalid proposals format");
      
    } catch (error) {
      console.error("Error parsing proposals response:", error);
      return this.getFallbackProposals(config);
    }
  }

  private getFallbackProposals(config: any): any[] {
    const themeTitle = this.getThemeTitle(config.theme);
    const examType = config.examType || 'enem';
    
    return [
      {
        title: themeTitle,
        statement: `Com base na leitura dos textos motivadores e nos conhecimentos constru√≠dos ao longo de sua forma√ß√£o, redija um texto dissertativo-argumentativo em modalidade escrita formal da l√≠ngua portuguesa sobre o tema "${themeTitle}", apresentando proposta de interven√ß√£o que respeite os direitos humanos.`,
        supportingText: this.getSupportingText(config.theme),
        examType,
        theme: config.theme || 'social',
        difficulty: config.difficulty || 'medio',
        year: '2024',
        isAiGenerated: true
      },
      {
        title: `Desafios contempor√¢neos: ${themeTitle.toLowerCase()}`,
        statement: `Considerando os desafios do Brasil contempor√¢neo, discuta em um texto dissertativo-argumentativo a import√¢ncia de abordar a quest√£o de "${themeTitle.toLowerCase()}" na sociedade atual, propondo solu√ß√µes vi√°veis para os problemas identificados.`,
        supportingText: this.getAlternativeSupportingText(config.theme),
        examType,
        theme: config.theme || 'social',
        difficulty: config.difficulty || 'medio',
        year: '2024',
        isAiGenerated: true
      }
    ];
  }

  private getThemeTitle(theme: string): string {
    const themes: Record<string, string> = {
      'technology': 'A influ√™ncia da tecnologia na sociedade contempor√¢nea',
      'environment': 'Sustentabilidade e preserva√ß√£o ambiental no Brasil',
      'education': 'Desafios da educa√ß√£o brasileira no s√©culo XXI',
      'health': 'Sa√∫de p√∫blica e qualidade de vida no Brasil',
      'politics': 'Participa√ß√£o pol√≠tica e cidadania no Brasil',
      'economy': 'Desigualdade econ√¥mica e oportunidades no Brasil',
      'culture': 'Diversidade cultural e identidade nacional',
      'social': 'Quest√µes sociais e direitos humanos no Brasil contempor√¢neo'
    };
    return themes[theme] || 'Desafios da sociedade brasileira contempor√¢nea';
  }

  private getSupportingText(theme: string): string {
    const supportingTexts: Record<string, string> = {
      'technology': 'A revolu√ß√£o digital transformou profundamente as rela√ß√µes sociais, o mercado de trabalho e os processos educacionais. Dados do IBGE mostram que mais de 80% dos brasileiros possuem acesso √† internet, evidenciando a necessidade de pol√≠ticas p√∫blicas que garantam inclus√£o digital e uso consciente da tecnologia.',
      'environment': 'O Brasil abriga a maior biodiversidade do planeta e possui 60% da Floresta Amaz√¥nica. Segundo o INPE, o desmatamento aumentou 30% nos √∫ltimos anos, evidenciando a urg√™ncia de pol√≠ticas de preserva√ß√£o que conciliem desenvolvimento econ√¥mico e sustentabilidade ambiental.',
      'education': 'O √çndice de Desenvolvimento da Educa√ß√£o B√°sica (IDEB) revela disparidades significativas na qualidade do ensino brasileiro. Dados do PISA mostram que o Brasil ocupa posi√ß√µes baixas em rankings internacionais, demandando reformas estruturais no sistema educacional.',
      'social': 'O Brasil enfrenta desafios hist√≥ricos relacionados √† desigualdade social, viol√™ncia urbana e garantia de direitos fundamentais. Dados do IBGE indicam que milh√µes de brasileiros ainda vivem em situa√ß√£o de vulnerabilidade, requerendo pol√≠ticas p√∫blicas efetivas de inclus√£o social.'
    };
    return supportingTexts[theme] || 'A sociedade brasileira contempor√¢nea enfrenta diversos desafios que exigem an√°lise cr√≠tica e propostas de solu√ß√µes estruturais para o desenvolvimento sustent√°vel e a garantia dos direitos fundamentais.';
  }

  private getAlternativeSupportingText(theme: string): string {
    const alternativeTexts: Record<string, string> = {
      'technology': 'A intelig√™ncia artificial e a automa√ß√£o est√£o redefinindo o futuro do trabalho. Estudos indicam que at√© 2030, milh√µes de empregos ser√£o transformados pela tecnologia, exigindo capacita√ß√£o profissional e pol√≠ticas de transi√ß√£o para os trabalhadores.',
      'environment': 'As mudan√ßas clim√°ticas representam um dos maiores desafios do s√©culo XXI. O Acordo de Paris estabelece metas ambiciosas de redu√ß√£o de emiss√µes, e o Brasil tem papel fundamental nesse contexto devido √† sua matriz energ√©tica e recursos naturais.',
      'education': 'A pandemia de COVID-19 evidenciou as desigualdades educacionais no Brasil. Milh√µes de estudantes ficaram sem acesso ao ensino remoto, ampliando as disparidades sociais e demandando investimentos em infraestrutura e tecnologia educacional.',
      'social': 'Os direitos humanos fundamentais, estabelecidos pela Constitui√ß√£o Federal de 1988, ainda n√£o s√£o plenamente garantidos para todos os brasileiros. Quest√µes como moradia, seguran√ßa alimentar e acesso √† justi√ßa permanecem como desafios sociais urgentes.'
    };
    return alternativeTexts[theme] || 'A constru√ß√£o de uma sociedade mais justa e igualit√°ria requer o comprometimento de todos os setores sociais na implementa√ß√£o de pol√≠ticas p√∫blicas efetivas e na promo√ß√£o da cidadania plena.';
  }

  async generateEssayOutline(questionnaireData: any): Promise<any> {
    if (!this.hasApiKey || !this.model) {
      throw new Error("GEMINI_API_KEY n√£o configurada. Configure a chave da API para usar esta funcionalidade.");
    }

    try {
      const prompt = this.buildOutlinePrompt(questionnaireData);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      // Extract token usage metadata from Gemini response
      // Use totalTokenCount as authoritative source (matches Google AI Studio exactly)
      const usageMetadata = result.response.usageMetadata || {};
      const rawPromptTokens = usageMetadata.promptTokenCount || 0;
      const rawOutputTokensValue = usageMetadata.candidatesTokenCount;
      const rawOutputTokens = Array.isArray(rawOutputTokensValue) 
        ? rawOutputTokensValue.reduce((sum, count) => sum + (count || 0), 0)
        : (rawOutputTokensValue || 0);
      const totalTokens = usageMetadata.totalTokenCount || 0;
      
      // Reconcile component tokens to match official totalTokenCount (includes system tokens)
      let promptTokens = rawPromptTokens;
      let outputTokens = rawOutputTokens;
      
      if (totalTokens > 0 && (rawPromptTokens + rawOutputTokens) !== totalTokens) {
        // Total is authoritative - adjust components proportionally to match
        const rawSum = rawPromptTokens + rawOutputTokens;
        if (rawSum > 0) {
          const ratio = totalTokens / rawSum;
          promptTokens = Math.round(rawPromptTokens * ratio);
          outputTokens = totalTokens - promptTokens; // Ensure exact match
        } else {
          // No component data, estimate 70/30 split
          promptTokens = Math.floor(totalTokens * 0.7);
          outputTokens = totalTokens - promptTokens;
        }
      }

      console.log(`üìä Gemini Essay Outline - Tokens: prompt=${promptTokens}, output=${outputTokens}, total=${totalTokens} (Google AI Studio compatible)`);

      const outline = this.parseOutlineResponse(text, questionnaireData.proposal);
      
      return {
        outline,
        tokensUsed: totalTokens,
        promptTokens,
        outputTokens
      };
    } catch (error) {
      console.error("Erro ao gerar roteiro:", error);
      throw new Error("Erro ao gerar roteiro. Tente novamente.");
    }
  }

  private buildOutlinePrompt(data: any): string {
    const { proposal, familiarityLevel, problemsAndChallenges, knownReferences, detailLevel } = data;

    const familiarityMap: Record<string, string> = {
      'never-studied': 'nunca estudou esse assunto',
      'know-little': 'conhece um pouco sobre o tema',
      'studied-can-develop': 'j√° estudou e sabe desenvolver',
      'advanced-mastery': 'tem dom√≠nio avan√ßado sobre o tema'
    };
    const familiarityText = familiarityMap[familiarityLevel as string] || 'n√≠vel n√£o especificado';

    const problemsText = problemsAndChallenges.dontKnow 
      ? 'n√£o conhece problemas ou desafios relacionados ao tema'
      : problemsAndChallenges.text;

    const referencesText = knownReferences.hasReferences && knownReferences.references
      ? knownReferences.references
      : 'n√£o possui repert√≥rio sobre este tema';

    const detailText = detailLevel === 'step-by-step' 
      ? 'passo a passo detalhado' 
      : 'dire√ß√µes gerais';

    const detailInstructions = detailLevel === 'step-by-step' 
      ? `
**üéØ MODO PASSO A PASSO ULTRA DETALHADO ATIVADO:**

O estudante solicitou o n√≠vel M√ÅXIMO de orienta√ß√£o. Cada frase do roteiro deve ser um GUIA COMPLETO DE ESCRITA.

üìã **ESTRUTURA OBRIGAT√ìRIA PARA CADA FRASE:**

Cada orienta√ß√£o de frase DEVE incluir estas 6 partes na ordem:

1Ô∏è‚É£ **COMO INICIAR** (Primeiras palavras):
   - Forne√ßa 2-3 op√ß√µes de conectivos ou palavras iniciais EXATAS
   - Exemplo: "Inicie com: 'Historicamente,' OU 'Desde o s√©culo XX,' OU 'De acordo com dados do...'"

2Ô∏è‚É£ **O QUE ESCREVER** (Conte√∫do espec√≠fico):
   - Indique EXATAMENTE qual informa√ß√£o incluir (nome de lei, dado estat√≠stico, evento, conceito)
   - Seja ULTRA ESPEC√çFICO ao tema da proposta "${proposal}"
   - Exemplo: "Mencione o Artigo 5¬∫ da Constitui√ß√£o Federal de 1988" OU "Cite que segundo o IBGE (2023), X% da popula√ß√£o..."

3Ô∏è‚É£ **COMO DESENVOLVER** (Estrutura da frase):
   - Explique a SEQU√äNCIA da constru√ß√£o frasal em etapas
   - Exemplo: "Primeira parte da frase: apresente o repert√≥rio. Segunda parte: conecte com o tema usando 'o que demonstra/evidencia/comprova'. Terceira parte: finalize com a implica√ß√£o"

4Ô∏è‚É£ **TAMANHO E PROPOR√á√ÉO**:
   - Especifique o tamanho estimado SEM usar marca√ß√µes vis√≠veis
   - Integre naturalmente: "Esta primeira parte deve ser desenvolvida com riqueza de detalhes" ao inv√©s de "(4-5 linhas)"

5Ô∏è‚É£ **EXEMPLO PR√ÅTICO APLICADO**:
   - Forne√ßa um exemplo COMPLETO e ESCRITO de como a frase ficaria
   - Use aspas para mostrar: "Exemplo: 'Historicamente, desde a promulga√ß√£o da Lei X em 2015, observa-se que...'"
   - O exemplo deve ser ESPEC√çFICO ao tema da proposta

6Ô∏è‚É£ **DICAS E ALERTAS**:
   - DICA: t√©cnica de reda√ß√£o para melhorar (vocabul√°rio, conectivos, argumenta√ß√£o)
   - ATEN√á√ÉO/EVITE: erro comum que prejudica a reda√ß√£o
   - CONECTE: como fazer transi√ß√£o para a pr√≥xima frase

üìù **MODELO DE ORIENTA√á√ÉO COMPLETA (siga este padr√£o):**

"[1-COMO INICIAR] Inicie a frase com conectivos temporais como 'Historicamente,', 'Desde o s√©culo XX,' ou contextuais como 'De acordo com estudos recentes,', 'Segundo dados de 2023,'. [2-O QUE ESCREVER] Apresente um repert√≥rio sociocultural espec√≠fico relacionado a [tema da proposta]: pode ser o Artigo 5¬∫ da Constitui√ß√£o Federal (se tratar de direitos), dados do IBGE sobre [aspecto espec√≠fico do tema], ou o filme/livro [nome espec√≠fico] que aborda [conex√£o com tema]. [3-COMO DESENVOLVER] Estruture a frase assim: primeiro apresente o repert√≥rio com sua fonte/data, depois use conectivos causais como 'o que demonstra', 'evidenciando', 'comprovando' para fazer a ponte, e finalize mostrando a RELA√á√ÉO direta com o problema central da proposta. [4-TAMANHO] Desenvolva esta contextualiza√ß√£o com riqueza de detalhes, equilibrando dados objetivos e interpreta√ß√£o cr√≠tica. [5-EXEMPLO] Exemplo aplicado ao tema: 'Segundo o relat√≥rio da ONU de 2023, aproximadamente 2 bilh√µes de pessoas no mundo n√£o t√™m acesso √† √°gua pot√°vel, o que evidencia a urg√™ncia de pol√≠ticas p√∫blicas de saneamento b√°sico e distribui√ß√£o equitativa de recursos h√≠dricos'. [6-DICAS] DICA: Use dados recentes (√∫ltimos 5 anos) para fortalecer credibilidade. EVITE: Citar repert√≥rio sem conect√°-lo ao tema - sempre explique a rela√ß√£o. CONECTE com a pr√≥xima frase: Ap√≥s apresentar o repert√≥rio, use conectivo de contraste ('Entretanto,', 'Contudo,') para introduzir a problem√°tica."

üéì **CONTE√öDO ULTRA ESPEC√çFICO:**
- Mencione nomes REAIS e ESPEC√çFICOS: leis com n√∫mero/ano, artigos da Constitui√ß√£o, dados com fonte e ano, nomes de filmes/livros/obras, eventos hist√≥ricos com data
- Para o tema "${proposal}", busque repert√≥rios que tenham RELA√á√ÉO DIRETA
- Forne√ßa conectivos VARIADOS (n√£o repita): causais (pois, visto que), adversativos (entretanto, contudo), conclusivos (portanto, logo), temporais (desde, historicamente)
- Sugira SIN√îNIMOS para palavras-chave do tema

üîß **PROGRESS√ÉO ARGUMENTATIVA:**
Explique como cada frase se conecta com a pr√≥xima:
- Da frase 1 para 2: "Ap√≥s contextualizar, use contraste para problematizar"
- Da frase 2 para 3: "Ap√≥s apresentar a tese, anuncie os caminhos argumentativos"
- Entre par√°grafos: "Use conectivos de adi√ß√£o (Al√©m disso,) ou de contraste (Por outro lado,)"

üí° **CHECKLIST DE QUALIDADE (garanta que cada orienta√ß√£o tenha):**
‚úÖ Conectivos espec√≠ficos sugeridos
‚úÖ Repert√≥rio/dado REAL e ESPEC√çFICO ao tema
‚úÖ Estrutura frasal passo a passo
‚úÖ Exemplo completo escrito
‚úÖ Dica de t√©cnica de reda√ß√£o
‚úÖ Alerta do que evitar
‚úÖ Indica√ß√£o de conex√£o com pr√≥xima frase

‚ö†Ô∏è **FORMATA√á√ÉO:**
N√ÉO use marca√ß√µes como "(4-5 linhas)", "(60 palavras)", "(Aprox. X linhas)" - integre instru√ß√µes de tamanho naturalmente no texto.
O estudante N√ÉO deve ver anota√ß√µes t√©cnicas entre par√™nteses.
`
      : `
**MODO DIRE√á√ïES GERAIS:**
Forne√ßa orienta√ß√µes objetivas e diretas. Cada frase do roteiro deve ter 1-2 linhas com o caminho principal, sem detalhamento excessivo.

‚ö†Ô∏è **FORMATA√á√ÉO:**
N√ÉO inclua marca√ß√µes t√©cnicas como "(Aprox. 4-5 linhas)", "(60-80 palavras)". O usu√°rio N√ÉO DEVE VER essas anota√ß√µes.
`;

    return `Voc√™ √© um especialista em reda√ß√µes dissertativo-argumentativas nota 1000. Crie um roteiro estruturado para uma reda√ß√£o dissertativo-argumentativa baseado nas seguintes informa√ß√µes:

**PROPOSTA DA REDA√á√ÉO:**
${proposal}

**PERFIL DO ESTUDANTE:**
- N√≠vel de familiaridade: ${familiarityText}
- Problemas/desafios conhecidos: ${problemsText}
- Repert√≥rio dispon√≠vel: ${referencesText}
- Detalhamento desejado: ${detailText}

${detailInstructions}

**INSTRU√á√ïES IMPORTANTES:**
Garanta que o roteiro evite cen√°rios onde o estudante:
- Fique no gen√©rico sem aprofundar
- Cite repert√≥rio sem explicar bem
- Fa√ßa conclus√£o incompleta
- Perca foco e fuja do tema

**AN√ÅLISE CR√çTICA DOS INPUTS DO USU√ÅRIO:**

1. **An√°lise dos Repert√≥rios Fornecidos:**
   ${knownReferences.hasReferences && knownReferences.references ? `
   O estudante mencionou: "${referencesText}"
   
   IMPORTANTE: Avalie se esses repert√≥rios se relacionam DIRETAMENTE com o tema "${proposal}".
   - Se os repert√≥rios fornecidos forem relevantes e bem relacionados ao tema, inclua-os nas sugest√µes e explique como us√°-los.
   - Se os repert√≥rios fornecidos N√ÉO se relacionarem bem com o tema ou forem gen√©ricos demais, SUBSTITUA por repert√≥rios mais adequados e espec√≠ficos ao tema. Explique por que os alternativos s√£o melhores.
   - Se os repert√≥rios fornecidos forem parcialmente relevantes, mantenha os bons e complemente com outros mais espec√≠ficos.
   ` : `
   O estudante n√£o possui repert√≥rio sobre este tema.
   Forne√ßa repert√≥rios ALTAMENTE ESPEC√çFICOS e relacionados ao tema.
   `}

2. **An√°lise dos Problemas/Desafios/Solu√ß√µes:**
   ${!problemsAndChallenges.dontKnow && problemsAndChallenges.text ? `
   O estudante mencionou: "${problemsText}"
   
   IMPORTANTE: Avalie se esses problemas/causas/desafios/solu√ß√µes fazem sentido para o tema "${proposal}" e se podem ser usados na argumenta√ß√£o.
   - Se as ideias fornecidas forem relevantes e bem articuladas, incorpore-as no roteiro.
   - Se as ideias fornecidas N√ÉO se relacionarem bem com o tema ou n√£o fizerem sentido argumentativo, sugira problemas/causas/desafios/solu√ß√µes MAIS ADEQUADOS ao tema.
   - No roteiro, use os melhores argumentos (sejam os fornecidos pelo usu√°rio ou os que voc√™ sugerir).
   ` : `
   O estudante n√£o conhece problemas ou desafios relacionados ao tema.
   Forne√ßa argumentos s√≥lidos e espec√≠ficos para este tema.
   `}

**SUGEST√ïES DE REPERT√ìRIO:**
Forne√ßa 3-4 repert√≥rios ESPEC√çFICOS e DIRETAMENTE relacionados ao tema da proposta. Para cada repert√≥rio, explique CLARAMENTE:
- Por que ele √© relevante para este tema espec√≠fico
- Como ele pode ser usado na argumenta√ß√£o
- Qual aspecto da proposta ele ajuda a desenvolver

Tipos de repert√≥rio: filmes, s√©ries, livros, dados estat√≠sticos, leis/artigos, eventos hist√≥ricos, pesquisas cient√≠ficas, obras de arte, m√∫sicas, document√°rios, cita√ß√µes filos√≥ficas/sociol√≥gicas.

**ESTRUTURA DO ROTEIRO:**

1. **AN√ÅLISE DA PROPOSTA:**
   - Proposta reformulada claramente
   - 3-5 palavras-chave obrigat√≥rias
   - Categoria tem√°tica (cultura, direitos humanos, tecnologia, educa√ß√£o, meio ambiente, etc.)
   - Alertas de risco (tangenciamento, fuga ao tema, generaliza√ß√µes, etc.)
   - **EXPLICA√á√ÉO DO TEMA**: Forne√ßa uma explica√ß√£o clara e did√°tica sobre o que trata o tema da proposta, adaptada ao n√≠vel de familiaridade do estudante:
     * Se o estudante NUNCA ESTUDOU o tema (${familiarityText === 'nunca estudou esse assunto' ? 'ESTE √â O CASO' : 'n√£o √© o caso'}): Explique o tema de forma INTRODUT√ìRIA e DID√ÅTICA, como se fosse a primeira vez que ele est√° tendo contato. Use linguagem acess√≠vel e defina conceitos b√°sicos.
     * Se o estudante CONHECE UM POUCO (${familiarityText === 'conhece um pouco sobre o tema' ? 'ESTE √â O CASO' : 'n√£o √© o caso'}): Explique o tema de forma INTERMEDI√ÅRIA, refor√ßando pontos-chave e adicionando contextos importantes que ele pode n√£o conhecer completamente.
     * Se o estudante J√Å ESTUDOU E SABE DESENVOLVER (${familiarityText === 'j√° estudou e sabe desenvolver' ? 'ESTE √â O CASO' : 'n√£o √© o caso'}): Explique o tema de forma AVAN√áADA, destacando nuances, debates contempor√¢neos e aspectos mais profundos que enriquecer√£o a reda√ß√£o.
     * Se o estudante TEM DOM√çNIO AVAN√áADO (${familiarityText === 'tem dom√≠nio avan√ßado sobre o tema' ? 'ESTE √â O CASO' : 'n√£o √© o caso'}): Explique o tema de forma ESPECIALIZADA, trazendo perspectivas cr√≠ticas, debates acad√™micos e conex√µes complexas que demonstrem alto n√≠vel de conhecimento.
     
     A explica√ß√£o deve ter 3-5 frases bem estruturadas e espec√≠ficas ao tema proposto "${proposal}".

2. **ROTEIRO EM 4 BLOCOS:**

   **1¬∫ Par√°grafo - Introdu√ß√£o (60-80 palavras):**
   - 1¬™ frase: Contextualize com repert√≥rio PRODUTIVO espec√≠fico ao tema (use um dos repert√≥rios sugeridos ou similar)
   - 2¬™ frase: Contraste com "entretanto/contudo/todavia" + formule a TESE
   - 3¬™ frase: Anuncie os 2 argumentos centrais

   **2¬∫ Par√°grafo - 1¬∫ Desenvolvimento (80-100 palavras):**
   - 1¬™ frase: Introduza primeira causa/argumento com dados ou exemplo concreto espec√≠fico ao tema
   - 2¬™ frase: Explique e aprofunde mostrando consequ√™ncias
   - 3¬™ frase: Conclua e conecte com a tese

   **3¬∫ Par√°grafo - 2¬∫ Desenvolvimento (80-100 palavras):**
   - 1¬™ frase: Apresente segunda causa/argumento
   - 2¬™ frase: Explique com dados, leis, obras culturais ou pesquisas ESPEC√çFICAS ao tema
   - 3¬™ frase: Feche e prepare para conclus√£o

   **4¬∫ Par√°grafo - Conclus√£o (60-80 palavras):**
   - 1¬™ frase: Retome problema e tese
   - 2¬™ frase: Proposta COMPLETA (Quem? O que? Como? Por meio de qu√™? Para qu√™?)
   - 3¬™ frase: Consequ√™ncia positiva esperada

Retorne APENAS um JSON com esta estrutura:
{
  "proposta": "proposta reformulada",
  "palavrasChave": ["palavra1", "palavra2", "palavra3"],
  "categoriaTematica": "categoria",
  "alertasRisco": ["alerta1", "alerta2"],
  "explicacaoTema": "Explica√ß√£o did√°tica e clara sobre o tema, adaptada ao n√≠vel de familiaridade do estudante (3-5 frases bem estruturadas)",
  "analiseRepertorio": "Se o usu√°rio forneceu repert√≥rios, explique aqui se foram mantidos, ajustados ou substitu√≠dos e POR QU√ä. Se n√£o forneceu, omita este campo.",
  "analiseProblemas": "Se o usu√°rio forneceu problemas/causas/solu√ß√µes, explique aqui se foram incorporados ou se voc√™ sugeriu alternativas melhores e POR QU√ä. Se n√£o forneceu, omita este campo.",
  "repertoriosSugeridos": [
    {
      "titulo": "Nome do repert√≥rio (ex: Filme 'Pantera Negra', Constitui√ß√£o Federal Art. 216, etc.)",
      "tipo": "tipo (filme/livro/lei/dado/evento/pesquisa/etc)",
      "relacao": "Explica√ß√£o clara e espec√≠fica de como este repert√≥rio se relaciona com o tema da proposta e como pode ser usado na reda√ß√£o"
    }
  ],
  "introducao": {
    "frase1": "...",
    "frase2": "...",
    "frase3": "..."
  },
  "desenvolvimento1": {
    "frase1": "...",
    "frase2": "...",
    "frase3": "..."
  },
  "desenvolvimento2": {
    "frase1": "...",
    "frase2": "...",
    "frase3": "..."
  },
  "conclusao": {
    "frase1": "...",
    "frase2": "...",
    "frase3": "..."
  }
}`;
  }

  private parseOutlineResponse(text: string, originalProposal: string): any {
    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return parsed;
      }
      throw new Error("Formato de resposta inv√°lido");
    } catch (error) {
      console.error("Erro ao fazer parse da resposta:", error);
      return {
        proposta: originalProposal,
        palavrasChave: ["tema", "sociedade", "Brasil"],
        categoriaTematica: "social",
        alertasRisco: ["Evite generaliza√ß√µes", "Aprofunde os argumentos"],
        introducao: {
          frase1: "Contextualize o tema com repert√≥rio produtivo",
          frase2: "Contraste com a realidade e formule sua tese",
          frase3: "Anuncie os dois argumentos centrais"
        },
        desenvolvimento1: {
          frase1: "Introduza a primeira causa com dados concretos",
          frase2: "Explique e aprofunde mostrando consequ√™ncias",
          frase3: "Conclua e conecte com a tese"
        },
        desenvolvimento2: {
          frase1: "Apresente a segunda causa/argumento",
          frase2: "Explique com dados, leis ou pesquisas",
          frase3: "Feche e prepare para conclus√£o"
        },
        conclusao: {
          frase1: "Retome o problema e a tese",
          frase2: "Proposta completa: Quem? O que? Como? Por meio de qu√™? Para qu√™?",
          frase3: "Consequ√™ncia positiva esperada"
        }
      };
    }
  }
}

export const geminiService = new GeminiService();